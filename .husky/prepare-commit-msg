#!/usr/bin/env sh
. "$(dirname "$0")/_/h"

# Automatic Version Bumping Hook
# Bumps version based on conventional commit message format
# - feat:, refactor: â†’ minor version bump (0.x.0)
# - fix:, chore:, docs:, perf:, test:, ci:, build: â†’ patch version bump (0.0.x)

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2

# Only run for regular commits (not merge, squash, etc.)
if [ -n "$COMMIT_SOURCE" ]; then
  exit 0
fi

# Read the commit message
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

# Skip for merge commits
if echo "$COMMIT_MSG" | grep -qE "^Merge (branch|remote-tracking branch)"; then
  exit 0
fi

# Skip for version bump commits
if echo "$COMMIT_MSG" | grep -qE "^chore: bump version"; then
  exit 0
fi

# Parse conventional commit format
# Pattern: type(optional-scope): description
if echo "$COMMIT_MSG" | grep -qE "^(feat|fix|docs|refactor|perf|test|build|ci|chore)(\(.+\))?\s*:.+"; then
  # Extract the commit type
  COMMIT_TYPE=$(echo "$COMMIT_MSG" | sed -E 's/^([a-z]+)(\(.+\))?\s*:.*/\1/')

  # Determine bump type
  BUMP_TYPE=""
  case "$COMMIT_TYPE" in
    feat|refactor)
      BUMP_TYPE="minor"
      ;;
    fix|chore|docs|perf|test|build|ci)
      BUMP_TYPE="patch"
      ;;
  esac

  if [ -n "$BUMP_TYPE" ]; then
    echo ""
    echo "ðŸ”– Bumping $BUMP_TYPE version for commit type: $COMMIT_TYPE"

    # Read current version from package.json
    CURRENT_VERSION=$(node -p "require('./package.json').version")

    # Parse version components
    MAJOR=$(echo "$CURRENT_VERSION" | cut -d. -f1)
    MINOR=$(echo "$CURRENT_VERSION" | cut -d. -f2)
    PATCH=$(echo "$CURRENT_VERSION" | cut -d. -f3)

    # Calculate new version
    if [ "$BUMP_TYPE" = "minor" ]; then
      MINOR=$((MINOR + 1))
      PATCH=0
    else
      PATCH=$((PATCH + 1))
    fi

    NEW_VERSION="$MAJOR.$MINOR.$PATCH"

    # Update package.json
    node -e "
      const fs = require('fs');
      const pkg = JSON.parse(fs.readFileSync('./package.json', 'utf-8'));
      pkg.version = '$NEW_VERSION';
      fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2) + '\n', 'utf-8');
    "

    # Stage the updated package.json
    git add package.json

    # Create version tag
    git tag -a "v$NEW_VERSION" -m "Release version $NEW_VERSION"

    echo "âœ… Version bumped: $CURRENT_VERSION â†’ $NEW_VERSION"
    echo "âœ… Created tag: v$NEW_VERSION"
    echo ""
  fi
fi

exit 0

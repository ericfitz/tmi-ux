{
  "openapi": "3.0.3",
  "info": {
    "title": "TMI (Threat Modeling Improved) API",
    "description": "A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.",
    "version": "1.0.0"
  },
  "externalDocs": {
    "description": "Find more information here",
    "url": ""
  },
  "servers": [
    {
      "url": "https://api.tmi.example.com",
      "description": "Production server"
    },
    {
      "url": "http://localhost:8080",
      "description": "Local development server"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT token for authenticated requests"
      }
    },
    "schemas": {
      "ApiInfo": {
        "type": "object",
        "description": "API information response for the root endpoint",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "enum": [
                  "OK",
                  "ERROR"
                ],
                "description": "Status code indicating if the API is functioning correctly"
              },
              "time": {
                "type": "string",
                "format": "date-time",
                "description": "Current server time in UTC, formatted as RFC 3339"
              }
            },
            "required": [
              "code",
              "time"
            ]
          },
          "service": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the service"
              },
              "build": {
                "type": "string",
                "description": "Current build number",
                "maxLength": 256
              }
            },
            "required": [
              "name",
              "build"
            ]
          },
          "api": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "description": "API version"
              },
              "specification": {
                "type": "string",
                "format": "uri",
                "description": "URL to the API specification",
                "maxLength": 1024
              }
            },
            "required": [
              "version",
              "specification"
            ]
          },
          "operator": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Operator name from environment variables",
                "maxLength": 256
              },
              "contact": {
                "type": "string",
                "description": "Operator contact information from environment variables",
                "maxLength": 1024
              }
            },
            "required": [
              "name",
              "contact"
            ]
          }
        },
        "required": [
          "status",
          "service",
          "api",
          "operator"
        ],
        "example": {
          "status": {
            "code": "OK",
            "time": "2025-04-09T12:00:00Z"
          },
          "service": {
            "name": "TMI",
            "build": "1.0.0-386eea0"
          },
          "api": {
            "version": "1.0",
            "specification": "https://github.com/ericfitz/tmi/blob/main/tmi-openapi.json"
          },
          "operator": {
            "name": "Example Organization",
            "contact": "api-support@example.com"
          }
        }
      },
      "Document": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the document (UUID)",
            "maxLength": 36,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Document name",
            "minLength": 1,
            "maxLength": 256,
            "pattern": "^[^<>\"'&]*$",
            "x-oapi-codegen-extra-tags": {
              "binding": "required"
            }
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "URL location of the document",
            "maxLength": 1024,
            "x-oapi-codegen-extra-tags": {
              "binding": "required,url"
            }
          },
          "description": {
            "type": "string",
            "description": "Description of document purpose or content",
            "maxLength": 1024,
            "nullable": true
          },
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Metadata"
            },
            "description": "Key-value pairs for additional document metadata",
            "nullable": true
          }
        },
        "required": [
          "name",
          "url"
        ],
        "example": {
          "id": "6ba7b810-9dad-11d1-beef-00c04fd430c8",
          "name": "Example Application Design",
          "url": "https://example.com/design.pdf",
          "description": "Technical design document for the Example application",
          "metadata": [
            {
              "key": "document_type",
              "value": "technical_specification"
            },
            {
              "key": "version",
              "value": "1.2"
            }
          ]
        }
      },
      "Source": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the source code reference (UUID)",
            "maxLength": 36,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Name for the source code reference",
            "maxLength": 256
          },
          "description": {
            "type": "string",
            "description": "Description of the referenced source code",
            "maxLength": 1024,
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "Source code repository type",
            "enum": [
              "git",
              "svn",
              "mercurial",
              "other"
            ],
            "maxLength": 16
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "URL to retrieve the referenced source code",
            "maxLength": 1024
          },
          "parameters": {
            "type": "object",
            "description": "repo-specific parameters for retrieving the source",
            "properties": {
              "refType": {
                "type": "string",
                "enum": [
                  "branch",
                  "tag",
                  "commit"
                ],
                "description": "Reference type (branch, tag, or commit)",
                "maxLength": 6
              },
              "refValue": {
                "type": "string",
                "description": "Reference value (branch name, tag value, or commit id)",
                "maxLength": 256
              },
              "subPath": {
                "type": "string",
                "description": "Sub-path within the repository",
                "maxLength": 256
              }
            },
            "required": [
              "refType",
              "refValue"
            ]
          },
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Metadata"
            },
            "description": "Key-value pairs for additional source metadata",
            "nullable": true
          }
        },
        "required": [
          "url"
        ],
        "example": {
          "id": "6ba7b810-1dad-11d1-8080-00c04fd430c8",
          "name": "GitHub Repo",
          "description": "Technical design document for the Example application",
          "type": "git",
          "url": "https://github.com/ericfitz/tmi-ux.git",
          "parameters": {
            "refType": "branch",
            "refValue": "main"
          },
          "metadata": []
        }
      },
      "BaseDiagram": {
        "type": "object",
        "description": "Base diagram object with common properties",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the diagram (UUID)",
            "maxLength": 36,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Name of the diagram",
            "maxLength": 256
          },
          "type": {
            "type": "string",
            "description": "Type of diagram with version",
            "enum": [
              "DFD-1.0.0"
            ],
            "maxLength": 64
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp (ISO3339)",
            "maxLength": 36
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "description": "Last modification timestamp (ISO3339)",
            "maxLength": 36
          },
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Metadata"
            },
            "description": "Key-value pairs for additional diagram metadata",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "created_at",
          "modified_at"
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "DFD-1.0.0": "#/components/schemas/DfdDiagram"
          }
        }
      },
      "DfdDiagram": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseDiagram"
          },
          {
            "type": "object",
            "description": "Data Flow Diagram (DFD) with cells",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "DFD-1.0.0"
                ],
                "description": "DFD diagram type with version"
              },
              "cells": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Node"
                    },
                    {
                      "$ref": "#/components/schemas/Edge"
                    }
                  ]
                },
                "description": "List of diagram cells (nodes and edges) following X6 structure"
              }
            },
            "required": [
              "cells"
            ]
          }
        ]
      },
      "CreateDiagramRequest": {
        "type": "object",
        "description": "Request body for creating a new diagram - only includes client-provided fields",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the diagram",
            "maxLength": 256
          },
          "type": {
            "type": "string",
            "description": "Type of diagram with version",
            "enum": [
              "DFD-1.0.0"
            ],
            "maxLength": 64
          }
        },
        "required": [
          "name",
          "type"
        ],
        "additionalProperties": false
      },
      "Diagram": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/DfdDiagram"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "DFD-1.0.0": "#/components/schemas/DfdDiagram"
          }
        },
        "example": {
          "id": "359314D9-B6A3-460B-805F-B82190D7290F",
          "type": "DFD-1.0.0",
          "name": "Workflow Diagram",
          "description": "A process workflow",
          "created_at": "2025-04-06T12:00:00Z",
          "modified_at": "2025-04-06T12:30:00Z",
          "metadata": [],
          "cells": [
            {
              "id": "233598D2-8C6D-4A73-AFE1-647081C4F7AA",
              "shape": "process",
              "x": 100,
              "y": 100,
              "width": 120,
              "height": 60,
              "zIndex": 10,
              "visible": true,
              "attrs": {
                "body": {
                  "fill": "#ffffff",
                  "stroke": "#000000",
                  "strokeWidth": 2
                },
                "text": {
                  "text": "Process Data",
                  "fontSize": 14,
                  "fill": "#000000"
                }
              },
              "ports": {
                "groups": {
                  "in": {
                    "position": "left"
                  },
                  "out": {
                    "position": "right"
                  }
                },
                "items": [
                  {
                    "id": "port_in_1",
                    "group": "in"
                  },
                  {
                    "id": "port_out_1",
                    "group": "out"
                  }
                ]
              },
              "data": []
            },
            {
              "id": "456789AB-CD12-34EF-56GH-789012345678",
              "shape": "edge",
              "source": {
                "cell": "233598D2-8C6D-4A73-AFE1-647081C4F7AA",
                "port": "port_out_1"
              },
              "target": {
                "cell": "789ABC12-3456-78DE-F012-3456789ABCDE"
              },
              "zIndex": 1,
              "visible": true,
              "attrs": {
                "line": {
                  "stroke": "#808080",
                  "strokeWidth": 1,
                  "targetMarker": {
                    "name": "classic",
                    "size": 8
                  }
                }
              },
              "labels": [
                {
                  "attrs": {
                    "text": {
                      "text": "Data Flow",
                      "fontSize": 12,
                      "fill": "#333333"
                    }
                  },
                  "position": 0.5
                }
              ],
              "vertices": [],
              "data": []
            }
          ]
        }
      },
      "Cell": {
        "type": "object",
        "description": "Base schema for all diagram cells (nodes and edges) fully compatible with AntV X6 graph library. This schema includes all X6 native properties plus convenience properties for easier integration. X6-specific properties like markup, tools, router, and connector are supported for advanced customization.",
        "discriminator": {
          "propertyName": "shape"
        },
        "required": [
          "id",
          "shape"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the cell (UUID)",
            "format": "uuid",
            "example": "37EAEDFA-BF37-4996-8665-242FEC34BBFF",
            "maxLength": 36
          },
          "shape": {
            "type": "string",
            "description": "Shape type identifier that determines cell structure and behavior",
            "example": "process"
          },
          "zIndex": {
            "type": "number",
            "description": "Z-order layer for rendering (higher values render on top)",
            "default": 1,
            "minimum": 0
          },
          "visible": {
            "type": "boolean",
            "description": "Whether the cell is visible in the diagram",
            "default": true
          },
          "data": {
            "type": "object",
            "description": "Flexible data storage compatible with X6, with reserved metadata namespace",
            "properties": {
              "_metadata": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Metadata"
                },
                "description": "Reserved namespace for structured business metadata"
              }
            },
            "additionalProperties": true,
            "default": {
              "_metadata": []
            }
          },
          "markup": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarkupElement"
            },
            "description": "SVG/HTML markup definition for custom shape rendering in X6"
          },
          "tools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CellTool"
            },
            "description": "Interactive tools attached to the cell for user interaction"
          }
        }
      },
      "Node": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Cell"
          },
          {
            "type": "object",
            "description": "A diagram node representing an entity, process, store, or boundary. Fully compatible with X6 Node objects and supports both X6 native properties (markup, tools) and convenience properties (label, position, size, style) for easier integration.",
            "required": [
              "x",
              "y",
              "width",
              "height"
            ],
            "properties": {
              "shape": {
                "type": "string",
                "enum": [
                  "actor",
                  "process",
                  "store",
                  "security-boundary",
                  "text-box"
                ],
                "description": "Node type determining its visual representation and behavior"
              },
              "x": {
                "type": "number",
                "description": "X coordinate of the node's position"
              },
              "y": {
                "type": "number",
                "description": "Y coordinate of the node's position"
              },
              "width": {
                "type": "number",
                "description": "Width of the node in pixels",
                "minimum": 40
              },
              "height": {
                "type": "number",
                "description": "Height of the node in pixels",
                "minimum": 30
              },
              "angle": {
                "type": "number",
                "description": "Rotation angle in degrees",
                "default": 0
              },
              "attrs": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NodeAttrs"
                  }
                ],
                "description": "Visual styling attributes for the node"
              },
              "ports": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PortConfiguration"
                  }
                ],
                "description": "Port configuration for connections"
              },
              "parent": {
                "type": "string",
                "format": "uuid",
                "description": "ID of the parent cell for nested/grouped nodes (UUID)",
                "nullable": true,
                "maxLength": 36
              },
              "label": {
                "type": "string",
                "description": "Convenience property: Simple text label that automatically creates appropriate attrs.text.text structure",
                "maxLength": 256
              },
              "position": {
                "type": "object",
                "description": "Convenience property: Position as a single object (alternative to separate x/y properties)",
                "properties": {
                  "x": {
                    "type": "number",
                    "description": "X coordinate"
                  },
                  "y": {
                    "type": "number",
                    "description": "Y coordinate"
                  }
                },
                "required": [
                  "x",
                  "y"
                ]
              },
              "size": {
                "type": "object",
                "description": "Convenience property: Size as a single object (alternative to separate width/height properties)",
                "properties": {
                  "width": {
                    "type": "number",
                    "description": "Width in pixels",
                    "minimum": 40
                  },
                  "height": {
                    "type": "number",
                    "description": "Height in pixels",
                    "minimum": 30
                  }
                },
                "required": [
                  "width",
                  "height"
                ]
              },
              "style": {
                "type": "object",
                "description": "Convenience property: Simplified styling options that automatically create appropriate attrs structure",
                "properties": {
                  "fill": {
                    "type": "string",
                    "description": "Background fill color",
                    "maxLength": 32
                  },
                  "stroke": {
                    "type": "string",
                    "description": "Border/outline color",
                    "maxLength": 32
                  },
                  "strokeWidth": {
                    "type": "number",
                    "description": "Border/outline width in pixels",
                    "minimum": 0
                  },
                  "fontSize": {
                    "type": "number",
                    "description": "Text font size in pixels",
                    "minimum": 1
                  },
                  "fontColor": {
                    "type": "string",
                    "description": "Text color",
                    "maxLength": 32
                  }
                }
              }
            },
            "example": {
              "id": "233598D2-8C6D-4A73-AFE1-647081C4F7AA",
              "shape": "process",
              "x": 100,
              "y": 100,
              "width": 120,
              "height": 60,
              "zIndex": 10,
              "visible": true,
              "attrs": {
                "body": {
                  "fill": "#ffffff",
                  "stroke": "#000000",
                  "strokeWidth": 2
                },
                "text": {
                  "text": "Process Data",
                  "fontSize": 14,
                  "fill": "#000000"
                }
              },
              "ports": {
                "groups": {
                  "in": {
                    "position": "left"
                  },
                  "out": {
                    "position": "right"
                  }
                },
                "items": [
                  {
                    "id": "port_in_1",
                    "group": "in"
                  },
                  {
                    "id": "port_out_1",
                    "group": "out"
                  }
                ]
              },
              "data": {
                "_metadata": [
                  {
                    "key": "category",
                    "value": "business-process"
                  },
                  {
                    "key": "owner",
                    "value": "engineering-team"
                  }
                ],
                "customValidation": {
                  "rules": [
                    "required-input",
                    "sanitize-output"
                  ],
                  "level": "strict"
                }
              },
              "markup": [
                {
                  "tagName": "rect",
                  "selector": "body",
                  "attrs": {
                    "rx": 5,
                    "ry": 5
                  }
                },
                {
                  "tagName": "text",
                  "selector": "label"
                }
              ],
              "tools": [
                {
                  "name": "boundary",
                  "args": {
                    "padding": 5
                  }
                }
              ]
            }
          }
        ]
      },
      "Edge": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Cell"
          },
          {
            "type": "object",
            "description": "A diagram edge representing a connection or data flow between nodes. Fully compatible with X6 Edge objects and supports X6 routing algorithms (manhattan, orth, oneSide, metro, er), connector styles (normal, rounded, smooth, jumpover), custom markup, tools, and convenience properties (label, style) for easier integration.",
            "required": [
              "source",
              "target"
            ],
            "properties": {
              "shape": {
                "type": "string",
                "enum": [
                  "edge"
                ],
                "description": "Edge type identifier"
              },
              "source": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EdgeTerminal"
                  }
                ],
                "description": "Source connection point"
              },
              "target": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EdgeTerminal"
                  }
                ],
                "description": "Target connection point"
              },
              "attrs": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EdgeAttrs"
                  }
                ],
                "description": "Visual styling attributes for the edge"
              },
              "labels": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EdgeLabel"
                },
                "description": "Text labels positioned along the edge"
              },
              "vertices": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Point"
                },
                "description": "Intermediate waypoints for edge routing"
              },
              "router": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EdgeRouter"
                  }
                ],
                "description": "Edge routing algorithm configuration for path calculation"
              },
              "connector": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EdgeConnector"
                  }
                ],
                "description": "Edge connector style configuration for visual appearance"
              },
              "defaultLabel": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EdgeLabel"
                  }
                ],
                "description": "Default label configuration applied to edges without explicit labels"
              },
              "label": {
                "type": "string",
                "description": "Convenience property: Simple text label that automatically creates appropriate attrs.text.text structure",
                "maxLength": 256
              },
              "style": {
                "type": "object",
                "description": "Convenience property: Simplified styling options that automatically create appropriate attrs structure",
                "properties": {
                  "stroke": {
                    "type": "string",
                    "description": "Line color",
                    "maxLength": 32
                  },
                  "strokeWidth": {
                    "type": "number",
                    "description": "Line width in pixels",
                    "minimum": 0
                  },
                  "strokeDasharray": {
                    "type": "string",
                    "description": "Line dash pattern (e.g., '5 5' for dashed)",
                    "maxLength": 64
                  },
                  "fontSize": {
                    "type": "number",
                    "description": "Label font size in pixels",
                    "minimum": 1
                  },
                  "fontColor": {
                    "type": "string",
                    "description": "Label text color",
                    "maxLength": 32
                  }
                }
              }
            },
            "example": {
              "id": "456789AB-CD12-34EF-56GH-789012345678",
              "shape": "edge",
              "source": {
                "cell": "233598D2-8C6D-4A73-AFE1-647081C4F7AA",
                "port": "port_out_1"
              },
              "target": {
                "cell": "789ABC12-3456-78DE-F012-3456789ABCDE"
              },
              "zIndex": 1,
              "visible": true,
              "attrs": {
                "line": {
                  "stroke": "#808080",
                  "strokeWidth": 1,
                  "targetMarker": {
                    "name": "classic",
                    "size": 8
                  }
                }
              },
              "labels": [
                {
                  "attrs": {
                    "text": {
                      "text": "Data Flow",
                      "fontSize": 12,
                      "fill": "#333333"
                    }
                  },
                  "position": 0.5
                }
              ],
              "vertices": [],
              "data": {
                "_metadata": [
                  {
                    "key": "flow-type",
                    "value": "data"
                  },
                  {
                    "key": "sensitivity",
                    "value": "public"
                  }
                ],
                "routingHints": {
                  "preferredPath": "shortest",
                  "avoidOverlap": true
                }
              },
              "router": {
                "name": "manhattan",
                "args": {
                  "step": 10,
                  "padding": 20
                }
              },
              "connector": {
                "name": "rounded",
                "args": {
                  "radius": 5
                }
              }
            }
          }
        ]
      },
      "ThreatModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ThreatModelBase"
          },
          {
            "type": "object",
            "description": "Complete ThreatModel with server-generated fields",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the threat model (UUID)",
                "maxLength": 36,
                "readOnly": true
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "Creation timestamp (RFC3339)",
                "maxLength": 24,
                "readOnly": true
              },
              "modified_at": {
                "type": "string",
                "format": "date-time",
                "description": "Last modification timestamp (RFC3339)",
                "maxLength": 24,
                "readOnly": true
              },
              "created_by": {
                "type": "string",
                "description": "Username or identifier of the creator of the threat model",
                "maxLength": 256,
                "pattern": "^[^<>\"'&]*$",
                "readOnly": true
              },
              "documents": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Document"
                },
                "description": "List of documents related to the threat model",
                "readOnly": true
              },
              "sourceCode": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Source"
                },
                "description": "List of source code repositories related to the threat model",
                "readOnly": true
              },
              "diagrams": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Diagram"
                },
                "description": "List of diagram objects associated with this threat model",
                "readOnly": true
              },
              "threats": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Threat"
                },
                "description": "List of threats within the threat model",
                "readOnly": true
              }
            }
          }
        ],
        "example": {
          "id": "F898D276-DE86-4837-9B5E-C46E1A08EAB6",
          "name": "System Threat Model",
          "description": "Threats for system X",
          "created_at": "2025-04-06T12:00:00Z",
          "modified_at": "2025-04-06T12:00:00Z",
          "owner": "user@example.com",
          "created_by": "user@example.com",
          "threat_model_framework": "STRIDE",
          "issue_url": "https://issues.example.com/browse/TM-123",
          "authorization": [
            {
              "subject": "user@example.com",
              "role": "owner"
            }
          ],
          "metadata": [],
          "documents": [
            {
              "id": "3ba7b810-9dad-11d1-beef-00c04fd430c8",
              "name": "System Architecture Document",
              "url": "https://docs.example.com/system-architecture.pdf",
              "description": "Technical architecture documentation for the system",
              "metadata": [
                {
                  "key": "document_type",
                  "value": "architecture"
                },
                {
                  "key": "version",
                  "value": "2.1"
                }
              ]
            }
          ],
          "sourceCode": [
            {
              "id": "6ba7b810-1dad-11d1-8080-00c04fd430c8",
              "name": "GitHub Repo",
              "description": "Source code for the tmi-ux application",
              "type": "git",
              "url": "https://github.com/ericfitz/tmi-ux.git",
              "parameters": {
                "refType": "branch",
                "refValue": "main"
              },
              "metadata": [
                {
                  "key": "environment",
                  "value": "production"
                },
                {
                  "key": "team",
                  "value": "security"
                }
              ]
            }
          ],
          "diagrams": [
            {
              "id": "22DB9004-435D-4765-9E41-0291AA8FE15A",
              "type": "DFD-1.0.0",
              "name": "System Overview Diagram",
              "description": "Main system data flow diagram",
              "created_at": "2025-04-06T12:00:00Z",
              "modified_at": "2025-04-06T12:30:00Z",
              "metadata": [],
              "cells": []
            }
          ],
          "threats": [
            {
              "id": "EC464A19-D1CA-4B72-AD8D-055AD2073C2B",
              "threat_model_id": "B7946A3A-5581-42C6-91BF-F41A1E1DD535",
              "name": "Data Breach",
              "description": "Unauthorized data access",
              "mitigation": "Recommendation: implement least privilege authorization policy",
              "created_at": "2025-04-06T12:01:00Z",
              "modified_at": "2025-04-06T12:01:00Z",
              "diagram_id": "",
              "cell_id": "",
              "severity": "High",
              "score": 7.5,
              "priority": "High",
              "mitigated": false,
              "status": "Open",
              "threat_type": "Information Disclosure",
              "issue_url": "https://issues.example.com/browse/SEC-456",
              "metadata": []
            }
          ]
        }
      },
      "Threat": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ThreatBase"
          },
          {
            "type": "object",
            "description": "Complete Threat with server-generated fields",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the threat (UUID)",
                "maxLength": 36,
                "readOnly": true
              },
              "threat_model_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier of the parent threat model (UUID)",
                "maxLength": 36,
                "readOnly": true
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "Creation timestamp (RFC3339)",
                "maxLength": 24,
                "readOnly": true
              },
              "modified_at": {
                "type": "string",
                "format": "date-time",
                "description": "Last modification timestamp (RFC3339)",
                "maxLength": 24,
                "readOnly": true
              }
            }
          }
        ]
      },
      "Authorization": {
        "type": "object",
        "description": "A user-role pair defining access permissions",
        "properties": {
          "subject": {
            "type": "string",
            "description": "Username or identifier of the user (may be email address or other format)",
            "minLength": 1,
            "maxLength": 256,
            "pattern": "^[^<>\"'&]*$",
            "x-oapi-codegen-extra-tags": {
              "binding": "required"
            }
          },
          "role": {
            "type": "string",
            "enum": [
              "reader",
              "writer",
              "owner"
            ],
            "description": "Role: reader (view), writer (edit), owner (full control)",
            "maxLength": 6,
            "x-oapi-codegen-extra-tags": {
              "binding": "required"
            }
          }
        },
        "required": [
          "subject",
          "role"
        ]
      },
      "Metadata": {
        "type": "object",
        "description": "A key-value pair for extensible metadata",
        "properties": {
          "key": {
            "type": "string",
            "description": "Metadata key",
            "minLength": 1,
            "maxLength": 256,
            "pattern": "^[a-zA-Z0-9_./:-]+$",
            "x-oapi-codegen-extra-tags": {
              "binding": "required"
            }
          },
          "value": {
            "type": "string",
            "description": "Metadata value",
            "minLength": 1,
            "maxLength": 1024,
            "pattern": "^[^<>]*$",
            "x-oapi-codegen-extra-tags": {
              "binding": "required"
            }
          }
        },
        "required": [
          "key",
          "value"
        ]
      },
      "Error": {
        "type": "object",
        "description": "Standard error response format",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error code"
          },
          "error_description": {
            "type": "string",
            "description": "Human-readable error description"
          },
          "error_uri": {
            "type": "string",
            "format": "uri",
            "description": "URI to documentation about the error"
          }
        },
        "required": [
          "error",
          "error_description"
        ],
        "example": {
          "error": "invalid_request",
          "error_description": "The request is missing a required parameter",
          "error_uri": "https://docs.example.com/auth/errors/invalid_request"
        }
      },
      "AuthTokenResponse": {
        "type": "object",
        "description": "JWT token response for authentication endpoints",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "JWT access token"
          },
          "refresh_token": {
            "type": "string",
            "description": "Refresh token for obtaining new access tokens"
          },
          "token_type": {
            "type": "string",
            "enum": [
              "Bearer"
            ],
            "description": "Token type"
          },
          "expires_in": {
            "type": "integer",
            "description": "Access token expiration time in seconds"
          }
        },
        "required": [
          "access_token",
          "refresh_token",
          "token_type",
          "expires_in"
        ],
        "example": {
          "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
          "refresh_token": "def456...",
          "token_type": "Bearer",
          "expires_in": 3600
        }
      },
      "CollaborationSession": {
        "type": "object",
        "description": "Details of an active collaboration session for a diagram",
        "properties": {
          "session_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the session (UUID)",
            "maxLength": 36,
            "readOnly": true
          },
          "threat_model_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the associated threat model (UUID)",
            "maxLength": 36
          },
          "threat_model_name": {
            "type": "string",
            "description": "Name of the associated threat model",
            "maxLength": 256
          },
          "diagram_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the associated diagram (UUID)",
            "maxLength": 36
          },
          "diagram_name": {
            "type": "string",
            "description": "Name of the associated diagram",
            "maxLength": 256
          },
          "participants": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "A participant in the session",
              "properties": {
                "user_id": {
                  "type": "string",
                  "description": "Username or identifier of the participant (may be email address or other format)",
                  "maxLength": 256
                },
                "joined_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Join timestamp",
                  "maxLength": 36
                }
              }
            },
            "description": "List of active participants"
          },
          "websocket_url": {
            "type": "string",
            "description": "WebSocket URL for real-time updates",
            "maxLength": 1024
          }
        },
        "required": [
          "session_id",
          "threat_model_id",
          "threat_model_name",
          "diagram_id",
          "diagram_name",
          "participants",
          "websocket_url"
        ],
        "example": {
          "session_id": "D7744D3A-ED22-40AF-862B-29786CAD0007",
          "threat_model_id": "5311D207-AFD5-4A1A-BA83-14C1445DC257",
          "threat_model_name": "E-commerce Platform Security Analysis",
          "diagram_id": "DFF7F4A9-CBCE-4001-9198-2706C86F7EF3",
          "diagram_name": "User Authentication Flow",
          "participants": [
            {
              "user_id": "user@example.com",
              "joined_at": "2025-04-06T12:02:00Z"
            }
          ],
          "websocket_url": "wss://api.example.com/threat_models/5311D207-AFD5-4A1A-BA83-14C1445DC257/diagrams/DFF7F4A9-CBCE-4001-9198-2706C86F7EF3/ws"
        }
      },
      "DiagramListItem": {
        "type": "object",
        "description": "A simplified diagram item for list endpoints, containing id, name, and type",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the diagram (UUID)",
            "maxLength": 36,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Name of the diagram",
            "maxLength": 256
          },
          "type": {
            "type": "string",
            "enum": [
              "DFD-1.0.0"
            ],
            "description": "Type of the diagram"
          }
        },
        "required": [
          "id",
          "name",
          "type"
        ]
      },
      "TMListItem": {
        "type": "object",
        "description": "Enhanced item for threat model list endpoints with key metadata and counts",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the threat model (UUID)",
            "maxLength": 36,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Name of the threat model",
            "maxLength": 256
          },
          "description": {
            "type": "string",
            "description": "Description of the threat model",
            "maxLength": 1024
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp (RFC3339)",
            "maxLength": 24
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "description": "Last modification timestamp (RFC3339)",
            "maxLength": 24
          },
          "owner": {
            "type": "string",
            "description": "Username or identifier of the current owner"
          },
          "created_by": {
            "type": "string",
            "description": "Username or identifier of the creator",
            "maxLength": 256
          },
          "threat_model_framework": {
            "type": "string",
            "description": "The framework used for this threat model"
          },
          "issue_url": {
            "type": "string",
            "format": "uri",
            "description": "URL to an issue in an issue tracking system",
            "maxLength": 1024
          },
          "document_count": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of documents associated with this threat model"
          },
          "source_count": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of source code entries associated with this threat model"
          },
          "diagram_count": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of diagrams associated with this threat model"
          },
          "threat_count": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of threats defined in this threat model"
          }
        },
        "required": [
          "id",
          "name",
          "created_at",
          "modified_at",
          "owner",
          "created_by",
          "threat_model_framework",
          "document_count",
          "source_count",
          "diagram_count",
          "threat_count"
        ]
      },
      "Point": {
        "type": "object",
        "description": "A 2D point with x and y coordinates",
        "required": [
          "x",
          "y"
        ],
        "properties": {
          "x": {
            "type": "number",
            "description": "X coordinate"
          },
          "y": {
            "type": "number",
            "description": "Y coordinate"
          }
        },
        "example": {
          "x": 100,
          "y": 200
        }
      },
      "EdgeTerminal": {
        "type": "object",
        "description": "Connection point for an edge (source or target)",
        "required": [
          "cell"
        ],
        "properties": {
          "cell": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the connected node (UUID)",
            "maxLength": 36
          },
          "port": {
            "type": "string",
            "description": "ID of the specific port on the node (optional)",
            "nullable": true,
            "maxLength": 64
          }
        },
        "example": {
          "cell": "233598D2-8C6D-4A73-AFE1-647081C4F7AA",
          "port": "port_out_1"
        }
      },
      "NodeAttrs": {
        "type": "object",
        "description": "Visual attributes for a node",
        "properties": {
          "body": {
            "type": "object",
            "description": "Body/shape styling attributes",
            "properties": {
              "fill": {
                "type": "string",
                "description": "Fill color",
                "maxLength": 32
              },
              "stroke": {
                "type": "string",
                "description": "Stroke color",
                "maxLength": 32
              },
              "strokeWidth": {
                "type": "number",
                "description": "Stroke width in pixels",
                "minimum": 0
              },
              "strokeDasharray": {
                "type": "string",
                "description": "Dash pattern for strokes",
                "nullable": true,
                "maxLength": 64
              }
            }
          },
          "text": {
            "type": "object",
            "description": "Text/label styling attributes",
            "properties": {
              "text": {
                "type": "string",
                "description": "Label text content",
                "maxLength": 256
              },
              "fontSize": {
                "type": "number",
                "description": "Font size in pixels",
                "minimum": 1
              },
              "fill": {
                "type": "string",
                "description": "Text color",
                "maxLength": 32
              },
              "fontFamily": {
                "type": "string",
                "description": "Font family",
                "maxLength": 64
              }
            }
          }
        }
      },
      "EdgeAttrs": {
        "type": "object",
        "description": "Visual attributes for an edge",
        "properties": {
          "line": {
            "type": "object",
            "description": "Line styling attributes",
            "properties": {
              "stroke": {
                "type": "string",
                "description": "Line color",
                "maxLength": 32
              },
              "strokeWidth": {
                "type": "number",
                "description": "Line width in pixels",
                "minimum": 0
              },
              "strokeDasharray": {
                "type": "string",
                "description": "Dash pattern for the line",
                "nullable": true,
                "maxLength": 64
              },
              "targetMarker": {
                "type": "object",
                "description": "Arrowhead marker configuration",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Marker type",
                    "enum": [
                      "classic",
                      "block",
                      "diamond",
                      "circle"
                    ],
                    "maxLength": 32
                  },
                  "size": {
                    "type": "number",
                    "description": "Marker size in pixels",
                    "minimum": 1
                  }
                }
              },
              "sourceMarker": {
                "type": "object",
                "description": "Source marker configuration",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Marker type",
                    "enum": [
                      "classic",
                      "block",
                      "diamond",
                      "circle"
                    ],
                    "maxLength": 32
                  },
                  "size": {
                    "type": "number",
                    "description": "Marker size in pixels",
                    "minimum": 1
                  }
                }
              }
            }
          }
        }
      },
      "EdgeLabel": {
        "type": "object",
        "description": "Label positioned along an edge",
        "properties": {
          "attrs": {
            "type": "object",
            "description": "Label styling attributes",
            "properties": {
              "text": {
                "type": "object",
                "description": "Text styling",
                "properties": {
                  "text": {
                    "type": "string",
                    "description": "Label text content",
                    "maxLength": 256
                  },
                  "fontSize": {
                    "type": "number",
                    "description": "Font size in pixels",
                    "minimum": 1
                  },
                  "fill": {
                    "type": "string",
                    "description": "Text color",
                    "maxLength": 32
                  },
                  "fontFamily": {
                    "type": "string",
                    "description": "Font family",
                    "maxLength": 64
                  }
                }
              }
            }
          },
          "position": {
            "type": "number",
            "description": "Position along the edge (0 = start, 1 = end)",
            "minimum": 0,
            "maximum": 1
          }
        },
        "example": {
          "attrs": {
            "text": {
              "text": "Data Flow",
              "fontSize": 12,
              "fill": "#333333"
            }
          },
          "position": 0.5
        }
      },
      "PortConfiguration": {
        "type": "object",
        "description": "Port configuration for node connections",
        "properties": {
          "groups": {
            "type": "object",
            "description": "Port group definitions",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "position": {
                  "type": "string",
                  "enum": [
                    "top",
                    "right",
                    "bottom",
                    "left"
                  ],
                  "description": "Port position on the node"
                }
              }
            }
          },
          "items": {
            "type": "array",
            "description": "Individual port instances",
            "items": {
              "type": "object",
              "required": [
                "id",
                "group"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique port identifier",
                  "maxLength": 64
                },
                "group": {
                  "type": "string",
                  "description": "Port group this port belongs to",
                  "maxLength": 32
                }
              }
            }
          }
        }
      },
      "PaginatedResponse": {
        "type": "object",
        "description": "Paginated response wrapper for list endpoints",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Array of items for the current page"
          },
          "pagination": {
            "type": "object",
            "description": "Pagination metadata",
            "properties": {
              "total": {
                "type": "integer",
                "description": "Total number of items across all pages",
                "minimum": 0
              },
              "limit": {
                "type": "integer",
                "description": "Maximum number of items per page",
                "minimum": 1
              },
              "offset": {
                "type": "integer",
                "description": "Number of items skipped from the beginning",
                "minimum": 0
              },
              "has_more": {
                "type": "boolean",
                "description": "Whether there are more items available beyond this page"
              }
            },
            "required": [
              "total",
              "limit",
              "offset",
              "has_more"
            ]
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      },
      "MarkupElement": {
        "type": "object",
        "description": "SVG/HTML markup element for custom shape definitions in X6",
        "required": [
          "tagName"
        ],
        "properties": {
          "tagName": {
            "type": "string",
            "description": "SVG or HTML tag name (e.g., 'rect', 'circle', 'path', 'text')",
            "example": "rect"
          },
          "selector": {
            "type": "string",
            "description": "CSS selector for targeting this element in styling",
            "example": "body"
          },
          "attrs": {
            "type": "object",
            "description": "Element attributes and styling properties",
            "additionalProperties": true,
            "example": {
              "fill": "#ffffff",
              "stroke": "#000000",
              "stroke-width": 2
            }
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarkupElement"
            },
            "description": "Nested child elements"
          }
        }
      },
      "CellTool": {
        "type": "object",
        "description": "Interactive tool configuration for X6 cells",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Tool identifier (e.g., 'boundary', 'button', 'remove')",
            "example": "button"
          },
          "args": {
            "type": "object",
            "description": "Tool-specific configuration arguments",
            "additionalProperties": true,
            "example": {
              "x": 10,
              "y": 10,
              "markup": "<circle r='5' fill='red'/>"
            }
          }
        }
      },
      "EdgeRouter": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "normal",
              "orth",
              "oneSide",
              "manhattan",
              "metro",
              "er"
            ],
            "description": "Built-in router name"
          },
          {
            "type": "object",
            "description": "Router with custom configuration",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string",
                "enum": [
                  "normal",
                  "orth",
                  "oneSide",
                  "manhattan",
                  "metro",
                  "er"
                ],
                "description": "Router algorithm name"
              },
              "args": {
                "type": "object",
                "description": "Router-specific arguments",
                "additionalProperties": true,
                "properties": {
                  "padding": {
                    "type": "number",
                    "description": "Padding around obstacles for routing"
                  },
                  "step": {
                    "type": "number",
                    "description": "Grid step size for orthogonal routing"
                  },
                  "directions": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "top",
                        "right",
                        "bottom",
                        "left"
                      ]
                    },
                    "description": "Allowed routing directions"
                  }
                }
              }
            }
          }
        ],
        "description": "Edge routing algorithm configuration for pathfinding",
        "example": {
          "name": "manhattan",
          "args": {
            "step": 10,
            "padding": 20
          }
        }
      },
      "EdgeConnector": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "normal",
              "rounded",
              "smooth",
              "jumpover"
            ],
            "description": "Built-in connector name"
          },
          {
            "type": "object",
            "description": "Connector with custom configuration",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string",
                "enum": [
                  "normal",
                  "rounded",
                  "smooth",
                  "jumpover"
                ],
                "description": "Connector style name"
              },
              "args": {
                "type": "object",
                "description": "Connector-specific arguments",
                "additionalProperties": true,
                "properties": {
                  "radius": {
                    "type": "number",
                    "description": "Radius for rounded connectors"
                  },
                  "precision": {
                    "type": "number",
                    "description": "Precision for smooth connectors"
                  },
                  "size": {
                    "type": "number",
                    "description": "Jump size for jumpover connectors"
                  },
                  "jump": {
                    "type": "string",
                    "enum": [
                      "arc",
                      "gap",
                      "cubic"
                    ],
                    "description": "Jump style for jumpover connectors"
                  }
                }
              }
            }
          }
        ],
        "description": "Edge connector style configuration for visual appearance",
        "example": {
          "name": "rounded",
          "args": {
            "radius": 10
          }
        }
      },
      "ThreatModelBase": {
        "type": "object",
        "description": "Base schema for ThreatModel with client-writable fields",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the threat model",
            "minLength": 1,
            "maxLength": 256,
            "pattern": "^[^<>\"'&]*$",
            "x-oapi-codegen-extra-tags": {
              "binding": "required"
            }
          },
          "description": {
            "type": "string",
            "description": "Description of the threat model",
            "maxLength": 1024,
            "pattern": "^[^<>]*$"
          },
          "owner": {
            "type": "string",
            "description": "Username or identifier of the current owner (may be email address or other format)",
            "maxLength": 256,
            "pattern": "^[^<>\"'&]*$"
          },
          "threat_model_framework": {
            "type": "string",
            "description": "The framework used for this threat model"
          },
          "issue_url": {
            "type": "string",
            "format": "uri",
            "description": "URL to an issue in an issue tracking system for this threat model",
            "maxLength": 1024
          },
          "authorization": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Authorization"
            },
            "description": "List of users and their roles for this threat model"
          },
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Metadata"
            },
            "description": "Key-value pairs for additional threat model metadata",
            "nullable": true
          }
        },
        "required": [
          "name",
          "owner",
          "authorization",
          "threat_model_framework"
        ]
      },
      "ThreatModelInput": {
        "type": "object",
        "description": "Input schema for creating/updating ThreatModel",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the threat model",
            "maxLength": 256
          },
          "description": {
            "type": "string",
            "description": "Description of the threat model and its purpose",
            "maxLength": 1024,
            "nullable": true
          },
          "threat_model_framework": {
            "type": "string",
            "description": "The framework used for this threat model"
          },
          "issue_url": {
            "type": "string",
            "format": "uri",
            "description": "URL to an issue in an issue tracking system for this threat model",
            "maxLength": 1024,
            "nullable": true
          },
          "authorization": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Authorization"
            },
            "description": "List of users and their roles for this threat model"
          },
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Metadata"
            },
            "description": "Key-value pairs for additional threat model metadata",
            "nullable": true
          }
        },
        "required": [
          "name"
        ]
      },
      "ThreatBase": {
        "type": "object",
        "description": "Base schema for Threat with client-writable fields",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the threat",
            "maxLength": 256
          },
          "description": {
            "type": "string",
            "description": "Description of the threat and risk to the organization",
            "maxLength": 1024
          },
          "mitigation": {
            "type": "string",
            "description": "Recommended or planned mitigation(s) for the threat",
            "maxLength": 1024
          },
          "diagram_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the associated diagram (if applicable) (UUID)",
            "nullable": true,
            "maxLength": 36
          },
          "cell_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the associated cell (if applicable) (UUID)",
            "nullable": true,
            "maxLength": 36
          },
          "severity": {
            "type": "string",
            "enum": [
              "Unknown",
              "None",
              "Low",
              "Medium",
              "High",
              "Critical"
            ],
            "description": "Severity level of the threat"
          },
          "score": {
            "type": "number",
            "description": "Numeric score representing the risk or impact of the threat",
            "minimum": 0.0,
            "maximum": 10.0
          },
          "priority": {
            "type": "string",
            "description": "Priority level for addressing the threat",
            "maxLength": 16
          },
          "mitigated": {
            "type": "boolean",
            "description": "Whether the threat has been mitigated"
          },
          "status": {
            "type": "string",
            "description": "Current status of the threat",
            "maxLength": 256
          },
          "threat_type": {
            "type": "string",
            "description": "Type or category of the threat",
            "maxLength": 256
          },
          "issue_url": {
            "type": "string",
            "format": "uri",
            "description": "URL to an issue in an issue tracking system for this threat",
            "maxLength": 1024
          },
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Metadata"
            },
            "description": "Key-value pairs for additional threat metadata",
            "nullable": true
          }
        },
        "required": [
          "name",
          "severity",
          "priority",
          "mitigated",
          "status",
          "threat_type"
        ]
      },
      "ThreatInput": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ThreatBase"
          }
        ],
        "description": "Input schema for creating/updating Threat"
      }
    },
    "responses": {
      "Error": {
        "description": "Error response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "authorizationError": {
                "summary": "Insufficient permissions for sub-resource access",
                "value": {
                  "error": "access_denied",
                  "error_description": "User does not have sufficient permissions to access this sub-resource",
                  "details": {
                    "required_role": "writer",
                    "user_role": "reader",
                    "threat_model_id": "550e8400-e29b-41d4-a716-446655440000",
                    "resource_type": "threat"
                  }
                }
              },
              "notFoundError": {
                "summary": "Sub-resource not found",
                "value": {
                  "error": "not_found",
                  "error_description": "The requested sub-resource does not exist or does not belong to the specified threat model",
                  "details": {
                    "resource_id": "550e8400-e29b-41d4-a716-446655440999",
                    "resource_type": "document",
                    "threat_model_id": "550e8400-e29b-41d4-a716-446655440000"
                  }
                }
              },
              "validationError": {
                "summary": "Invalid input data",
                "value": {
                  "error": "invalid_input",
                  "error_description": "The provided data does not meet validation requirements",
                  "details": {
                    "field_errors": [
                      {
                        "field": "name",
                        "message": "Name is required and cannot be empty"
                      },
                      {
                        "field": "url",
                        "message": "URL must be a valid HTTP/HTTPS URL"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "paths": {
    "/": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Get API information",
        "description": "Returns service, API, and operator information without authentication",
        "operationId": "getApiInfo",
        "responses": {
          "200": {
            "description": "Service and API information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInfo"
                }
              }
            }
          }
        }
      }
    },
    "/auth/providers": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "List available OAuth providers",
        "description": "Returns a list of configured OAuth providers available for authentication",
        "operationId": "getAuthProviders",
        "responses": {
          "200": {
            "description": "List of available OAuth providers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "providers": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Provider identifier"
                          },
                          "name": {
                            "type": "string",
                            "description": "Display name of the provider"
                          },
                          "icon": {
                            "type": "string",
                            "description": "Icon identifier for the provider"
                          },
                          "auth_url": {
                            "type": "string",
                            "format": "uri",
                            "description": "TMI authorization endpoint URL for this provider"
                          },
                          "redirect_uri": {
                            "type": "string",
                            "format": "uri",
                            "description": "OAuth callback URI configured for this provider"
                          },
                          "client_id": {
                            "type": "string",
                            "description": "OAuth client ID for this provider"
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "icon",
                          "auth_url",
                          "redirect_uri",
                          "client_id"
                        ]
                      }
                    }
                  },
                  "required": [
                    "providers"
                  ]
                },
                "example": {
                  "providers": [
                    {
                      "id": "google",
                      "name": "Google",
                      "icon": "fa-brands fa-google",
                      "auth_url": "http://localhost:8080/auth/login/google",
                      "redirect_uri": "http://localhost:8080/auth/callback",
                      "client_id": "675196260523-e8ppeu62pv222jhnpebe929b2tgl2jm0.apps.googleusercontent.com"
                    },
                    {
                      "id": "github",
                      "name": "GitHub",
                      "icon": "fa-brands fa-github",
                      "auth_url": "http://localhost:8080/auth/login/github",
                      "redirect_uri": "http://localhost:8080/auth/callback",
                      "client_id": "your-github-client-id"
                    },
                    {
                      "id": "microsoft",
                      "name": "Microsoft",
                      "icon": "fa-brands fa-microsoft",
                      "auth_url": "http://localhost:8080/auth/login/microsoft",
                      "redirect_uri": "http://localhost:8080/auth/callback",
                      "client_id": "your-microsoft-client-id"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/auth/login/{provider}": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Initiate OAuth authorization flow",
        "description": "Redirects user to OAuth provider's authorization page. Supports client callback URL for seamless client integration. Generates state parameter for CSRF protection.",
        "operationId": "authorizeOAuthProvider",
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "description": "OAuth provider identifier",
            "schema": {
              "type": "string",
              "enum": [
                "github",
                "google",
                "microsoft",
                "test"
              ]
            }
          },
          {
            "name": "client_callback",
            "in": "query",
            "required": false,
            "description": "Client callback URL where TMI should redirect after successful OAuth completion with tokens as query parameters. If not provided, tokens are returned as JSON response.",
            "schema": {
              "type": "string",
              "format": "uri",
              "example": "http://localhost:4200/auth/callback"
            }
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "description": "CSRF protection state parameter. Recommended for security. Will be included in the callback response.",
            "schema": {
              "type": "string",
              "example": "random_state_abc123"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect to OAuth provider authorization page",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "description": "OAuth provider authorization URL with client_id, redirect_uri, response_type, scope, and state parameters"
              }
            }
          },
          "400": {
            "description": "Invalid provider or provider not configured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error generating authorization URL",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/token/{provider}": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Exchange OAuth authorization code for JWT tokens",
        "description": "Provider-neutral endpoint to exchange OAuth authorization codes for TMI JWT tokens. Supports Google, GitHub, and Microsoft OAuth providers.",
        "operationId": "exchangeOAuthCode",
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "description": "OAuth provider identifier",
            "schema": {
              "type": "string",
              "enum": [
                "google",
                "github",
                "microsoft"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "Authorization code received from OAuth provider",
                    "example": "4/0AX4XfWiXY2BZ_example_auth_code_from_google"
                  },
                  "state": {
                    "type": "string",
                    "description": "State parameter for CSRF protection (optional but recommended)",
                    "example": "random_state_value_abc123"
                  },
                  "redirect_uri": {
                    "type": "string",
                    "format": "uri",
                    "description": "Redirect URI used in the authorization request (must match exactly)",
                    "example": "https://your-web-app.com/auth/callback"
                  }
                },
                "required": [
                  "code",
                  "redirect_uri"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OAuth exchange successful, TMI JWT tokens issued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthTokenResponse"
                },
                "example": {
                  "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyQGV4YW1wbGUuY29tIiwiZW1haWwiOiJ1c2VyQGV4YW1wbGUuY29tIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJleHAiOjE1MTYyNDI2MjJ9.example_jwt_signature",
                  "refresh_token": "8xLOxBtZp8_example_refresh_token",
                  "token_type": "Bearer",
                  "expires_in": 3600
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid provider, missing parameters, or invalid state",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "invalid_provider": {
                    "summary": "Invalid provider",
                    "value": {
                      "error": "Invalid provider: invalid_provider",
                      "error_description": "Provider 'invalid_provider' is not supported. Supported providers: google, github, microsoft"
                    }
                  },
                  "missing_code": {
                    "summary": "Missing authorization code",
                    "value": {
                      "error": "Invalid request: missing required fields",
                      "error_description": "The 'code' parameter is required"
                    }
                  },
                  "invalid_state": {
                    "summary": "Invalid state parameter",
                    "value": {
                      "error": "Invalid state parameter",
                      "error_description": "State parameter validation failed - possible CSRF attack"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - OAuth provider communication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "provider_error": {
                    "summary": "OAuth provider communication failed",
                    "value": {
                      "error": "Failed to exchange authorization code: oauth2: cannot fetch token: 400 Bad Request",
                      "error_description": "Unable to communicate with OAuth provider or invalid authorization code"
                    }
                  },
                  "user_info_error": {
                    "summary": "Failed to get user information",
                    "value": {
                      "error": "Failed to get user info: 401 Unauthorized",
                      "error_description": "OAuth provider denied access to user information"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Refresh JWT token",
        "description": "Exchanges a refresh token for a new JWT access token",
        "operationId": "refreshToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refresh_token": {
                    "type": "string",
                    "description": "Valid refresh token",
                    "example": "8xLOxBtZp8_example_refresh_token"
                  }
                },
                "required": [
                  "refresh_token"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "New JWT issued successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthTokenResponse"
                },
                "example": {
                  "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyQGV4YW1wbGUuY29tIiwiZW1haWwiOiJ1c2VyQGV4YW1wbGUuY29tIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJleHAiOjE1MTYyNDI2MjJ9.new_jwt_signature",
                  "refresh_token": "9yMPyCtZq9_new_refresh_token",
                  "token_type": "Bearer",
                  "expires_in": 3600
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing or invalid refresh token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "missing_token": {
                    "summary": "Missing refresh token",
                    "value": {
                      "error": "Invalid request: missing required fields",
                      "error_description": "The 'refresh_token' parameter is required"
                    }
                  },
                  "invalid_format": {
                    "summary": "Invalid token format",
                    "value": {
                      "error": "Invalid refresh token format",
                      "error_description": "Refresh token must be a valid UUID string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or expired refresh token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "expired_token": {
                    "summary": "Expired refresh token",
                    "value": {
                      "error": "Invalid refresh token",
                      "error_description": "The refresh token has expired or has been revoked"
                    }
                  },
                  "invalid_token": {
                    "summary": "Invalid refresh token",
                    "value": {
                      "error": "Invalid refresh token",
                      "error_description": "The provided refresh token is not valid"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/me": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get current user information",
        "description": "Returns information about the currently authenticated user",
        "operationId": "getCurrentUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Current user information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Unique identifier for the user (UUID)",
                      "maxLength": 36
                    },
                    "email": {
                      "type": "string",
                      "format": "email",
                      "description": "User email address"
                    },
                    "name": {
                      "type": "string",
                      "description": "User display name"
                    },
                    "providers": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "provider": {
                            "type": "string",
                            "description": "OAuth provider name"
                          },
                          "is_primary": {
                            "type": "boolean",
                            "description": "Whether this is the primary authentication method"
                          }
                        }
                      },
                      "description": "Linked OAuth providers"
                    }
                  },
                  "required": [
                    "id",
                    "email",
                    "name"
                  ]
                },
                "example": {
                  "id": "550e8400-e29b-41d4-a716-446655440000",
                  "email": "user@example.com",
                  "name": "John Doe",
                  "providers": [
                    {
                      "provider": "google",
                      "is_primary": true
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/auth/callback": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Handle OAuth callback",
        "description": "Exchanges OAuth authorization code for JWT tokens. If client_callback was provided during authorization, redirects to client with tokens. Otherwise returns tokens as JSON response.",
        "operationId": "handleOAuthCallback",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Authorization code from the OAuth provider"
          },
          {
            "name": "state",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Optional state parameter for CSRF protection"
          }
        ],
        "responses": {
          "200": {
            "description": "JWT tokens issued successfully (legacy mode when no client_callback provided)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthTokenResponse"
                }
              }
            }
          },
          "302": {
            "description": "Redirect to client callback URL with tokens (when client_callback was provided)",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string",
                  "format": "uri",
                  "example": "http://localhost:4200/auth/callback?access_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...&refresh_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...&expires_in=3600&token_type=Bearer&state=random_state_abc123"
                },
                "description": "Client callback URL with access_token, refresh_token, expires_in, token_type, and state as query parameters"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Logout user",
        "description": "Invalidates the user's JWT token by adding it to a blacklist, effectively ending the session. Once logged out, the token cannot be used for further authenticated requests until it naturally expires. The token blacklist is maintained in Redis with automatic cleanup based on token expiration times.",
        "operationId": "logoutUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Empty request body - token is provided via Authorization header",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {},
                "example": {}
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "User logged out successfully. The JWT token has been invalidated and added to the blacklist.",
            "headers": {
              "X-Request-ID": {
                "description": "Unique request identifier for tracking",
                "schema": {
                  "type": "string",
                  "example": "req_abc123def456"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed - invalid, missing, or malformed token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "missing_token": {
                    "summary": "Missing Authorization header",
                    "value": {
                      "error": "unauthorized",
                      "error_description": "Missing Authorization header"
                    }
                  },
                  "invalid_format": {
                    "summary": "Invalid Authorization header format",
                    "value": {
                      "error": "unauthorized",
                      "error_description": "Invalid Authorization header format"
                    }
                  },
                  "malformed_token": {
                    "summary": "Malformed JWT token",
                    "value": {
                      "error": "unauthorized",
                      "error_description": "Invalid token format"
                    }
                  },
                  "blacklisted_token": {
                    "summary": "Token already blacklisted",
                    "value": {
                      "error": "unauthorized",
                      "error_description": "Token has been revoked"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - token blacklisting failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/collaboration/sessions": {
      "get": {
        "tags": [
          "Collaboration"
        ],
        "summary": "List active collaboration sessions",
        "description": "Returns all currently active collaboration sessions for diagrams. Clients can use this endpoint to discover existing sessions before connecting via WebSocket.",
        "operationId": "getCollaborationSessions",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of active collaboration sessions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CollaborationSession"
                  }
                },
                "examples": {
                  "active_sessions": {
                    "summary": "Multiple active sessions",
                    "value": [
                      {
                        "diagram_id": "123e4567-e89b-12d3-a456-426614174000",
                        "participants": [
                          {
                            "user_id": "alice@example.com"
                          },
                          {
                            "user_id": "bob@example.com"
                          }
                        ]
                      }
                    ]
                  },
                  "no_sessions": {
                    "summary": "No active sessions",
                    "value": []
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed - invalid, missing, or malformed token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/threat_models": {
      "get": {
        "tags": [
          "Threat Models"
        ],
        "summary": "List threat models",
        "description": "Returns a list of threat models accessible to the authenticated user with enhanced metadata and entity counts",
        "operationId": "listThreatModels",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 20
            },
            "description": "Number of threat models to return"
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "description": "Pagination offset"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "created_at:desc"
            },
            "description": "Sort order (e.g., created_at:desc, name:asc)"
          },
          {
            "name": "owner",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by owner username or email"
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by threat model name (partial match)"
          },
          {
            "name": "description",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by threat model description (partial match)"
          },
          {
            "name": "issue_url",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by issue URL (partial match)"
          },
          {
            "name": "created_after",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter threat models created after this date (RFC3339 format)"
          },
          {
            "name": "created_before",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter threat models created before this date (RFC3339 format)"
          },
          {
            "name": "modified_after",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter threat models modified after this date (RFC3339 format)"
          },
          {
            "name": "modified_before",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter threat models modified before this date (RFC3339 format)"
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated list of threat models with enhanced metadata and entity counts",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/TMListItem"
                          }
                        }
                      }
                    }
                  ]
                },
                "example": {
                  "data": [
                    {
                      "id": "550e8400-e29b-41d4-a716-446655440000",
                      "name": "System Threat Model",
                      "description": "Comprehensive threat model for our web application system",
                      "created_at": "2025-04-06T12:00:00Z",
                      "modified_at": "2025-04-06T14:30:00Z",
                      "owner": "user@example.com",
                      "created_by": "admin@example.com",
                      "threat_model_framework": "STRIDE",
                      "issue_url": "https://github.com/example/issues/123",
                      "document_count": 3,
                      "source_count": 2,
                      "diagram_count": 1,
                      "threat_count": 15
                    }
                  ],
                  "pagination": {
                    "total": 1,
                    "limit": 20,
                    "offset": 0,
                    "has_more": false
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "tags": [
          "Threat Models"
        ],
        "summary": "Create a threat model",
        "description": "Creates a new threat model with the authenticated user as owner",
        "operationId": "createThreatModel",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ThreatModelInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Threat model created successfully",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "URL of the new threat model"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThreatModel"
                },
                "example": {
                  "id": "550e8400-e29b-41d4-a716-446655440000",
                  "name": "System Threat Model",
                  "description": "Threats for system X",
                  "created_at": "2025-04-06T12:00:00Z",
                  "modified_at": "2025-04-06T12:00:00Z",
                  "owner": "user@example.com",
                  "created_by": "user@example.com",
                  "threat_model_framework": "STRIDE",
                  "authorization": [
                    {
                      "subject": "user@example.com",
                      "role": "owner"
                    }
                  ],
                  "metadata": [],
                  "documents": [],
                  "sourceCode": [],
                  "diagrams": [],
                  "threats": []
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/threat_models/{threat_model_id}": {
      "get": {
        "tags": [
          "Threat Models"
        ],
        "summary": "Retrieve a threat model",
        "description": "Retrieves the full details of a specific threat model if the user has access",
        "operationId": "getThreatModel",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model to retrieve (UUID)"
          }
        ],
        "responses": {
          "200": {
            "description": "Full threat model details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThreatModel"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "tags": [
          "Threat Models"
        ],
        "summary": "Update a threat model",
        "description": "Fully updates a threat model; restricted to writer/owner roles",
        "operationId": "updateThreatModel",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model to update (UUID)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ThreatModelInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Threat model updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThreatModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "patch": {
        "tags": [
          "Threat Models"
        ],
        "summary": "Partially update a threat model",
        "description": "Applies JSON Patch operations to a threat model; restricted to writer/owner roles",
        "operationId": "patchThreatModel",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model to update (UUID)"
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "op": {
                      "type": "string",
                      "enum": [
                        "add",
                        "replace",
                        "remove",
                        "move",
                        "copy",
                        "test"
                      ],
                      "description": "Patch operation type"
                    },
                    "path": {
                      "type": "string",
                      "description": "JSON path to target"
                    },
                    "value": {
                      "description": "Value to apply"
                    }
                  },
                  "required": [
                    "op",
                    "path"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Threat model updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThreatModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Threat Models"
        ],
        "summary": "Delete a threat model",
        "description": "Deletes a threat model; restricted to owner role",
        "operationId": "deleteThreatModel",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model to delete (UUID)"
          }
        ],
        "responses": {
          "204": {
            "description": "Threat model deleted successfully"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/threat_models/{threat_model_id}/threats": {
      "get": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "List threats in a threat model",
        "description": "Returns a paginated list of threats within the specified threat model",
        "operationId": "getThreatModelThreats",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Maximum number of threats to return"
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "Number of threats to skip"
          }
        ],
        "responses": {
          "200": {
            "description": "List of threats",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "threats": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Threat"
                      }
                    },
                    "total_count": {
                      "type": "integer",
                      "description": "Total number of threats in the threat model"
                    }
                  },
                  "required": [
                    "threats",
                    "total_count"
                  ]
                },
                "examples": {
                  "threatList": {
                    "summary": "List of threats with metadata",
                    "value": {
                      "threats": [
                        {
                          "id": "550e8400-e29b-41d4-a716-446655440003",
                          "name": "SQL Injection Vulnerability",
                          "description": "Database injection through malicious SQL queries",
                          "severity": "High",
                          "priority": "urgent",
                          "status": "active",
                          "mitigated": false,
                          "threat_model_id": "550e8400-e29b-41d4-a716-446655440000",
                          "created_at": "2025-01-15T10:30:00Z",
                          "modified_at": "2025-01-15T14:45:00Z",
                          "metadata": [
                            {
                              "key": "category",
                              "value": "data_validation"
                            },
                            {
                              "key": "owasp_top_10",
                              "value": "A03"
                            },
                            {
                              "key": "assigned_to",
                              "value": "security-team"
                            }
                          ]
                        },
                        {
                          "id": "550e8400-e29b-41d4-a716-446655440004",
                          "name": "Cross-Site Scripting (XSS)",
                          "description": "Client-side script injection vulnerability",
                          "severity": "Medium",
                          "priority": "medium",
                          "status": "identified",
                          "mitigated": false,
                          "threat_model_id": "550e8400-e29b-41d4-a716-446655440000",
                          "created_at": "2025-01-15T11:00:00Z",
                          "modified_at": "2025-01-15T11:00:00Z",
                          "metadata": [
                            {
                              "key": "category",
                              "value": "input_validation"
                            },
                            {
                              "key": "owasp_top_10",
                              "value": "A07"
                            }
                          ]
                        }
                      ],
                      "total_count": 12
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Create a new threat",
        "description": "Creates a new threat within the specified threat model",
        "operationId": "createThreatModelThreat",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ThreatInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Threat created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Threat"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/threat_models/{threat_model_id}/threats/{threat_id}": {
      "get": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Get a specific threat",
        "description": "Returns details of a specific threat within the threat model",
        "operationId": "getThreatModelThreat",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "threat_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat (UUID)"
          }
        ],
        "responses": {
          "200": {
            "description": "Threat details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Threat"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Update a threat",
        "description": "Updates a specific threat within the threat model",
        "operationId": "updateThreatModelThreat",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "threat_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat (UUID)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ThreatInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Threat updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Threat"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "patch": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Partially update a threat",
        "description": "Applies JSON patch operations to a specific threat within the threat model",
        "operationId": "patchThreatModelThreat",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "threat_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat (UUID)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "op": {
                      "type": "string",
                      "enum": [
                        "add",
                        "remove",
                        "replace",
                        "move",
                        "copy",
                        "test"
                      ]
                    },
                    "path": {
                      "type": "string"
                    },
                    "value": {},
                    "from": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "op",
                    "path"
                  ]
                }
              },
              "examples": {
                "updateThreatDetails": {
                  "summary": "Update threat name and severity",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/name",
                      "value": "Updated SQL Injection Threat"
                    },
                    {
                      "op": "replace",
                      "path": "/severity",
                      "value": "Critical"
                    },
                    {
                      "op": "replace",
                      "path": "/description",
                      "value": "Updated description with more details"
                    }
                  ]
                },
                "addMetadata": {
                  "summary": "Add metadata to a threat",
                  "value": [
                    {
                      "op": "add",
                      "path": "/metadata/-",
                      "value": {
                        "key": "priority",
                        "value": "urgent"
                      }
                    },
                    {
                      "op": "add",
                      "path": "/metadata/-",
                      "value": {
                        "key": "assigned_to",
                        "value": "security-team"
                      }
                    }
                  ]
                },
                "updateStatus": {
                  "summary": "Update threat status and mitigation",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/status",
                      "value": "mitigated"
                    },
                    {
                      "op": "replace",
                      "path": "/mitigated",
                      "value": true
                    },
                    {
                      "op": "replace",
                      "path": "/mitigation",
                      "value": "Implemented input validation and parameterized queries"
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Threat patched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Threat"
                },
                "examples": {
                  "patchedThreat": {
                    "summary": "Successfully patched threat with updated fields",
                    "value": {
                      "id": "550e8400-e29b-41d4-a716-446655440003",
                      "name": "Updated SQL Injection Threat",
                      "description": "Updated description with more details",
                      "severity": "Critical",
                      "priority": "urgent",
                      "status": "active",
                      "mitigated": false,
                      "threat_model_id": "550e8400-e29b-41d4-a716-446655440000",
                      "created_at": "2025-01-15T10:30:00Z",
                      "modified_at": "2025-01-15T14:45:00Z",
                      "metadata": [
                        {
                          "key": "priority",
                          "value": "urgent"
                        },
                        {
                          "key": "assigned_to",
                          "value": "security-team"
                        },
                        {
                          "key": "cve_reference",
                          "value": "CVE-2024-1234"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Delete a threat",
        "description": "Deletes a specific threat from the threat model",
        "operationId": "deleteThreatModelThreat",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "threat_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat (UUID)"
          }
        ],
        "responses": {
          "204": {
            "description": "Threat deleted successfully"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/threat_models/{threat_model_id}/threats/{threat_id}/metadata": {
      "get": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Get threat metadata",
        "description": "Returns all metadata key-value pairs for the specified threat",
        "operationId": "getThreatMetadata",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "threat_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat (UUID)"
          }
        ],
        "responses": {
          "200": {
            "description": "Threat metadata list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Metadata"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Create threat metadata",
        "description": "Creates new metadata entry for the specified threat",
        "operationId": "createThreatMetadata",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "threat_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat (UUID)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Metadata"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Metadata entry created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metadata"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/threat_models/{threat_model_id}/threats/{threat_id}/metadata/{key}": {
      "get": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Get threat metadata by key",
        "description": "Returns a specific metadata entry by key for the specified threat",
        "operationId": "getThreatMetadataByKey",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "threat_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat (UUID)"
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 255
            },
            "description": "Metadata key to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata entry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metadata"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Update threat metadata by key",
        "description": "Updates a specific metadata entry by key for the specified threat",
        "operationId": "updateThreatMetadataByKey",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "threat_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat (UUID)"
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 255
            },
            "description": "Metadata key to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "string",
                    "description": "New value for the metadata entry"
                  }
                },
                "required": [
                  "value"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Metadata entry updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metadata"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Delete threat metadata by key",
        "description": "Deletes a specific metadata entry by key for the specified threat",
        "operationId": "deleteThreatMetadataByKey",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "threat_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat (UUID)"
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 255
            },
            "description": "Metadata key to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Metadata entry deleted successfully"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/threat_models/{threat_model_id}/threats/{threat_id}/metadata/bulk": {
      "post": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Bulk create threat metadata",
        "description": "Creates multiple metadata entries in a single operation for the specified threat",
        "operationId": "bulkCreateThreatMetadata",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "threat_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat (UUID)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Metadata"
                },
                "maxItems": 20
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Metadata entries created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Metadata"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/threat_models/{threat_model_id}/threats/bulk": {
      "post": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Bulk create threats",
        "description": "Creates multiple threats in a single operation for the specified threat model",
        "operationId": "bulkCreateThreatModelThreats",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Threat"
                },
                "maxItems": 20,
                "description": "Array of threats to create"
              },
              "examples": {
                "bulkCreateThreats": {
                  "summary": "Create multiple threats at once",
                  "value": [
                    {
                      "name": "SQL Injection Attack",
                      "description": "Attacker injects malicious SQL code through user input",
                      "impact": "High",
                      "likelihood": "Medium",
                      "risk_rating": "High",
                      "metadata": [
                        {
                          "key": "category",
                          "value": "injection"
                        },
                        {
                          "key": "stride",
                          "value": "tampering"
                        }
                      ]
                    },
                    {
                      "name": "Cross-Site Scripting (XSS)",
                      "description": "Malicious scripts executed in user's browser",
                      "impact": "Medium",
                      "likelihood": "High",
                      "risk_rating": "High",
                      "metadata": [
                        {
                          "key": "category",
                          "value": "xss"
                        },
                        {
                          "key": "stride",
                          "value": "tampering"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Threats created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Threat"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Bulk update threats",
        "description": "Updates multiple threats in a single operation for the specified threat model",
        "operationId": "bulkUpdateThreatModelThreats",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Threat"
                },
                "maxItems": 20,
                "description": "Array of threats to update (must include id field)"
              },
              "examples": {
                "bulkUpdateThreats": {
                  "summary": "Update multiple threats at once",
                  "value": [
                    {
                      "id": "750e8400-e29b-41d4-a716-446655440001",
                      "name": "Updated SQL Injection Attack",
                      "description": "Updated description for SQL injection vulnerability",
                      "impact": "High",
                      "likelihood": "Low",
                      "risk_rating": "Medium",
                      "metadata": [
                        {
                          "key": "category",
                          "value": "injection"
                        },
                        {
                          "key": "mitigation",
                          "value": "parameterized-queries"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Threats updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Threat"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/threat_models/{threat_model_id}/threats/batch/patch": {
      "post": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Batch patch threats",
        "description": "Applies JSON Patch operations to multiple threats in a single operation",
        "operationId": "batchPatchThreatModelThreats",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "patches": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "threat_id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "ID of the threat to patch"
                        },
                        "operations": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "op": {
                                "type": "string",
                                "enum": [
                                  "add",
                                  "replace",
                                  "remove",
                                  "move",
                                  "copy",
                                  "test"
                                ],
                                "description": "Patch operation type"
                              },
                              "path": {
                                "type": "string",
                                "description": "JSON path to target"
                              },
                              "value": {
                                "description": "Value to apply"
                              }
                            },
                            "required": [
                              "op",
                              "path"
                            ]
                          }
                        }
                      },
                      "required": [
                        "threat_id",
                        "operations"
                      ]
                    },
                    "maxItems": 10
                  }
                },
                "required": [
                  "patches"
                ]
              },
              "examples": {
                "batchPatchThreats": {
                  "summary": "Patch multiple threats with different operations",
                  "value": {
                    "patches": [
                      {
                        "threat_id": "750e8400-e29b-41d4-a716-446655440001",
                        "operations": [
                          {
                            "op": "replace",
                            "path": "/risk_rating",
                            "value": "Medium"
                          },
                          {
                            "op": "replace",
                            "path": "/likelihood",
                            "value": "Low"
                          }
                        ]
                      },
                      {
                        "threat_id": "750e8400-e29b-41d4-a716-446655440002",
                        "operations": [
                          {
                            "op": "add",
                            "path": "/metadata/-",
                            "value": {
                              "key": "reviewed",
                              "value": "true"
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Threats patched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Threat"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/threat_models/{threat_model_id}/threats/batch": {
      "delete": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Batch delete threats",
        "description": "Deletes multiple threats in a single operation for the specified threat model",
        "operationId": "batchDeleteThreatModelThreats",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "threat_ids",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "maxItems": 20,
              "minItems": 1
            },
            "description": "Comma-separated list of threat IDs to delete (e.g., id1,id2,id3)"
          }
        ],
        "responses": {
          "200": {
            "description": "Threats deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "deleted_count": {
                      "type": "integer",
                      "description": "Number of threats successfully deleted"
                    },
                    "deleted_ids": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "description": "Array of successfully deleted threat IDs"
                    }
                  },
                  "required": [
                    "deleted_count",
                    "deleted_ids"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/threat_models/{threat_model_id}/documents": {
      "get": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "List documents in a threat model",
        "description": "Returns a paginated list of documents within the specified threat model",
        "operationId": "getThreatModelDocuments",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Maximum number of documents to return"
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "Number of documents to skip"
          }
        ],
        "responses": {
          "200": {
            "description": "List of documents",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "documents": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Document"
                      }
                    },
                    "total_count": {
                      "type": "integer",
                      "description": "Total number of documents in the threat model"
                    }
                  },
                  "required": [
                    "documents",
                    "total_count"
                  ]
                },
                "examples": {
                  "documentList": {
                    "summary": "List of documents with pagination",
                    "value": {
                      "documents": [
                        {
                          "id": "550e8400-e29b-41d4-a716-446655440001",
                          "name": "Security Requirements Document",
                          "url": "https://docs.company.com/security-requirements.pdf",
                          "description": "Detailed security requirements and compliance standards",
                          "metadata": [
                            {
                              "key": "classification",
                              "value": "internal"
                            },
                            {
                              "key": "version",
                              "value": "1.2"
                            }
                          ]
                        },
                        {
                          "id": "550e8400-e29b-41d4-a716-446655440002",
                          "name": "Architecture Design Document",
                          "url": "https://docs.company.com/architecture-design.pdf",
                          "description": "System architecture and design specifications",
                          "metadata": [
                            {
                              "key": "classification",
                              "value": "internal"
                            },
                            {
                              "key": "version",
                              "value": "2.0"
                            }
                          ]
                        }
                      ],
                      "total_count": 5
                    }
                  },
                  "emptyList": {
                    "summary": "Empty document list",
                    "value": {
                      "documents": [],
                      "total_count": 0
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Create a new document",
        "description": "Creates a new document within the specified threat model",
        "operationId": "createThreatModelDocument",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Document"
              },
              "examples": {
                "createDocument": {
                  "summary": "Create a new security document",
                  "value": {
                    "name": "Security Requirements Document",
                    "url": "https://docs.company.com/security-requirements.pdf",
                    "description": "Detailed security requirements and compliance standards",
                    "metadata": [
                      {
                        "key": "classification",
                        "value": "internal"
                      },
                      {
                        "key": "version",
                        "value": "1.0"
                      },
                      {
                        "key": "owner",
                        "value": "security-team"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Document created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                },
                "examples": {
                  "createdDocument": {
                    "summary": "Successfully created document with generated ID",
                    "value": {
                      "id": "550e8400-e29b-41d4-a716-446655440001",
                      "name": "Security Requirements Document",
                      "url": "https://docs.company.com/security-requirements.pdf",
                      "description": "Detailed security requirements and compliance standards",
                      "metadata": [
                        {
                          "key": "classification",
                          "value": "internal"
                        },
                        {
                          "key": "version",
                          "value": "1.0"
                        },
                        {
                          "key": "owner",
                          "value": "security-team"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/threat_models/{threat_model_id}/documents/{document_id}": {
      "get": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Get a specific document",
        "description": "Returns details of a specific document within the threat model",
        "operationId": "getThreatModelDocument",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the document (UUID)"
          }
        ],
        "responses": {
          "200": {
            "description": "Document details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Update a document",
        "description": "Updates a specific document within the threat model",
        "operationId": "updateThreatModelDocument",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the document (UUID)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Document"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Document updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Delete a document",
        "description": "Deletes a specific document from the threat model",
        "operationId": "deleteThreatModelDocument",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the document (UUID)"
          }
        ],
        "responses": {
          "204": {
            "description": "Document deleted successfully"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/threat_models/{threat_model_id}/documents/{document_id}/metadata": {
      "get": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Get document metadata",
        "description": "Returns all metadata key-value pairs for the specified document",
        "operationId": "getDocumentMetadata",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the document (UUID)"
          }
        ],
        "responses": {
          "200": {
            "description": "Document metadata list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Metadata"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Create document metadata",
        "description": "Creates new metadata entry for the specified document",
        "operationId": "createDocumentMetadata",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the document (UUID)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Metadata"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Metadata entry created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metadata"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/threat_models/{threat_model_id}/documents/{document_id}/metadata/{key}": {
      "get": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Get document metadata by key",
        "description": "Returns a specific metadata entry by key for the specified document",
        "operationId": "getDocumentMetadataByKey",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the document (UUID)"
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 255
            },
            "description": "Metadata key to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata entry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metadata"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Update document metadata by key",
        "description": "Updates a specific metadata entry by key for the specified document",
        "operationId": "updateDocumentMetadataByKey",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the document (UUID)"
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 255
            },
            "description": "Metadata key to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "string",
                    "description": "New value for the metadata entry"
                  }
                },
                "required": [
                  "value"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Metadata entry updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metadata"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Delete document metadata by key",
        "description": "Deletes a specific metadata entry by key for the specified document",
        "operationId": "deleteDocumentMetadataByKey",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the document (UUID)"
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 255
            },
            "description": "Metadata key to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Metadata entry deleted successfully"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/threat_models/{threat_model_id}/documents/{document_id}/metadata/bulk": {
      "post": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Bulk create document metadata",
        "description": "Creates multiple metadata entries in a single operation for the specified document",
        "operationId": "bulkCreateDocumentMetadata",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the document (UUID)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Metadata"
                },
                "maxItems": 20
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Metadata entries created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Metadata"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/threat_models/{threat_model_id}/documents/bulk": {
      "post": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Bulk create documents",
        "description": "Creates multiple documents in a single operation for the specified threat model",
        "operationId": "bulkCreateThreatModelDocuments",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Document"
                },
                "maxItems": 20,
                "description": "Array of documents to create"
              },
              "examples": {
                "bulkCreateDocuments": {
                  "summary": "Create multiple documents at once",
                  "value": [
                    {
                      "name": "Architecture Document",
                      "url": "https://docs.company.com/architecture.pdf",
                      "description": "System architecture documentation",
                      "metadata": [
                        {
                          "key": "type",
                          "value": "architecture"
                        },
                        {
                          "key": "version",
                          "value": "2.1"
                        }
                      ]
                    },
                    {
                      "name": "Security Requirements",
                      "url": "https://docs.company.com/security.pdf",
                      "description": "Security requirements and compliance standards",
                      "metadata": [
                        {
                          "key": "classification",
                          "value": "internal"
                        },
                        {
                          "key": "department",
                          "value": "security"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Documents created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Document"
                  }
                },
                "examples": {
                  "bulkCreatedDocuments": {
                    "summary": "Successfully created documents with generated IDs",
                    "value": [
                      {
                        "id": "550e8400-e29b-41d4-a716-446655440001",
                        "name": "Architecture Document",
                        "url": "https://docs.company.com/architecture.pdf",
                        "description": "System architecture documentation",
                        "metadata": [
                          {
                            "key": "type",
                            "value": "architecture"
                          },
                          {
                            "key": "version",
                            "value": "2.1"
                          }
                        ],
                        "created_at": "2025-04-06T12:00:00Z",
                        "modified_at": "2025-04-06T12:00:00Z"
                      },
                      {
                        "id": "550e8400-e29b-41d4-a716-446655440002",
                        "name": "Security Requirements",
                        "url": "https://docs.company.com/security.pdf",
                        "description": "Security requirements and compliance standards",
                        "metadata": [
                          {
                            "key": "classification",
                            "value": "internal"
                          },
                          {
                            "key": "department",
                            "value": "security"
                          }
                        ],
                        "created_at": "2025-04-06T12:00:00Z",
                        "modified_at": "2025-04-06T12:00:00Z"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/threat_models/{threat_model_id}/sources": {
      "get": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "List sources in a threat model",
        "description": "Returns a paginated list of source code references within the specified threat model",
        "operationId": "getThreatModelSources",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Maximum number of sources to return"
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "Number of sources to skip"
          }
        ],
        "responses": {
          "200": {
            "description": "List of source code references",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sources": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Source"
                      }
                    },
                    "total_count": {
                      "type": "integer",
                      "description": "Total number of sources in the threat model"
                    }
                  },
                  "required": [
                    "sources",
                    "total_count"
                  ]
                },
                "examples": {
                  "sourceList": {
                    "summary": "List of source code references",
                    "value": {
                      "sources": [
                        {
                          "id": "550e8400-e29b-41d4-a716-446655440010",
                          "name": "Authentication Service",
                          "url": "https://github.com/company/auth-service",
                          "type": "git",
                          "description": "Core authentication and authorization service",
                          "parameters": {
                            "refType": "branch",
                            "refValue": "main"
                          },
                          "metadata": [
                            {
                              "key": "language",
                              "value": "go"
                            },
                            {
                              "key": "coverage",
                              "value": "85%"
                            },
                            {
                              "key": "security_scan",
                              "value": "passed"
                            }
                          ]
                        },
                        {
                          "id": "550e8400-e29b-41d4-a716-446655440011",
                          "name": "Database Layer",
                          "url": "https://github.com/company/db-layer",
                          "type": "git",
                          "description": "Database access layer and ORM implementation",
                          "parameters": {
                            "refType": "tag",
                            "refValue": "v1.2.3"
                          },
                          "metadata": [
                            {
                              "key": "language",
                              "value": "go"
                            },
                            {
                              "key": "database",
                              "value": "postgresql"
                            }
                          ]
                        }
                      ],
                      "total_count": 3
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Create a new source reference",
        "description": "Creates a new source code reference within the specified threat model",
        "operationId": "createThreatModelSource",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Source"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Source reference created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Source"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/threat_models/{threat_model_id}/sources/{source_id}": {
      "get": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Get a specific source reference",
        "description": "Returns details of a specific source code reference within the threat model",
        "operationId": "getThreatModelSource",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the source reference (UUID)"
          }
        ],
        "responses": {
          "200": {
            "description": "Source reference details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Source"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Update a source reference",
        "description": "Updates a specific source code reference within the threat model",
        "operationId": "updateThreatModelSource",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the source reference (UUID)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Source"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Source reference updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Source"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Delete a source reference",
        "description": "Deletes a specific source code reference from the threat model",
        "operationId": "deleteThreatModelSource",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the source reference (UUID)"
          }
        ],
        "responses": {
          "204": {
            "description": "Source reference deleted successfully"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/threat_models/{threat_model_id}/sources/{source_id}/metadata": {
      "get": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Get source metadata",
        "description": "Returns all metadata key-value pairs for the specified source reference",
        "operationId": "getSourceMetadata",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the source reference (UUID)"
          }
        ],
        "responses": {
          "200": {
            "description": "Source metadata list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Metadata"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Create source metadata",
        "description": "Creates new metadata entry for the specified source reference",
        "operationId": "createSourceMetadata",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the source reference (UUID)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Metadata"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Metadata entry created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metadata"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/threat_models/{threat_model_id}/sources/{source_id}/metadata/{key}": {
      "get": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Get source metadata by key",
        "description": "Returns a specific metadata entry by key for the specified source reference",
        "operationId": "getSourceMetadataByKey",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the source reference (UUID)"
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 255
            },
            "description": "Metadata key to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata entry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metadata"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Update source metadata by key",
        "description": "Updates a specific metadata entry by key for the specified source reference",
        "operationId": "updateSourceMetadataByKey",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the source reference (UUID)"
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 255
            },
            "description": "Metadata key to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "string",
                    "description": "New value for the metadata entry"
                  }
                },
                "required": [
                  "value"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Metadata entry updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metadata"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Delete source metadata by key",
        "description": "Deletes a specific metadata entry by key for the specified source reference",
        "operationId": "deleteSourceMetadataByKey",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the source reference (UUID)"
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 255
            },
            "description": "Metadata key to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Metadata entry deleted successfully"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/threat_models/{threat_model_id}/sources/{source_id}/metadata/bulk": {
      "post": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Bulk create source metadata",
        "description": "Creates multiple metadata entries in a single operation for the specified source reference",
        "operationId": "bulkCreateSourceMetadata",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the source reference (UUID)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Metadata"
                },
                "maxItems": 20
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Metadata entries created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Metadata"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/threat_models/{threat_model_id}/sources/bulk": {
      "post": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Bulk create sources",
        "description": "Creates multiple source references in a single operation for the specified threat model",
        "operationId": "bulkCreateThreatModelSources",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Source"
                },
                "maxItems": 20,
                "description": "Array of source references to create"
              },
              "examples": {
                "bulkCreateSources": {
                  "summary": "Create multiple source references at once",
                  "value": [
                    {
                      "name": "User Authentication Module",
                      "url": "https://github.com/company/repo/blob/main/auth/user.go",
                      "description": "Core user authentication logic",
                      "metadata": [
                        {
                          "key": "language",
                          "value": "go"
                        },
                        {
                          "key": "maintainer",
                          "value": "security-team"
                        }
                      ]
                    },
                    {
                      "name": "Database Connection Pool",
                      "url": "https://github.com/company/repo/blob/main/db/pool.go",
                      "description": "Database connection management",
                      "metadata": [
                        {
                          "key": "type",
                          "value": "infrastructure"
                        },
                        {
                          "key": "criticality",
                          "value": "high"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Sources created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Source"
                  }
                },
                "examples": {
                  "bulkCreatedSources": {
                    "summary": "Successfully created sources with generated IDs",
                    "value": [
                      {
                        "id": "650e8400-e29b-41d4-a716-446655440001",
                        "name": "User Authentication Module",
                        "url": "https://github.com/company/repo/blob/main/auth/user.go",
                        "description": "Core user authentication logic",
                        "metadata": [
                          {
                            "key": "language",
                            "value": "go"
                          },
                          {
                            "key": "maintainer",
                            "value": "security-team"
                          }
                        ],
                        "created_at": "2025-04-06T12:00:00Z",
                        "modified_at": "2025-04-06T12:00:00Z"
                      },
                      {
                        "id": "650e8400-e29b-41d4-a716-446655440002",
                        "name": "Database Connection Pool",
                        "url": "https://github.com/company/repo/blob/main/db/pool.go",
                        "description": "Database connection management",
                        "metadata": [
                          {
                            "key": "type",
                            "value": "infrastructure"
                          },
                          {
                            "key": "criticality",
                            "value": "high"
                          }
                        ],
                        "created_at": "2025-04-06T12:00:00Z",
                        "modified_at": "2025-04-06T12:00:00Z"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/threat_models/{threat_model_id}/metadata": {
      "get": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Get threat model metadata",
        "description": "Returns all metadata key-value pairs for the specified threat model",
        "operationId": "getThreatModelMetadata",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          }
        ],
        "responses": {
          "200": {
            "description": "Threat model metadata list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Metadata"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Create threat model metadata",
        "description": "Creates new metadata entry for the specified threat model",
        "operationId": "createThreatModelMetadata",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Metadata"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Metadata entry created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metadata"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/threat_models/{threat_model_id}/metadata/{key}": {
      "get": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Get threat model metadata by key",
        "description": "Returns a specific metadata entry by key for the specified threat model",
        "operationId": "getThreatModelMetadataByKey",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 255
            },
            "description": "Metadata key to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata entry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metadata"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Update threat model metadata by key",
        "description": "Updates a specific metadata entry by key for the specified threat model",
        "operationId": "updateThreatModelMetadataByKey",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 255
            },
            "description": "Metadata key to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "string",
                    "description": "New value for the metadata entry"
                  }
                },
                "required": [
                  "value"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Metadata entry updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metadata"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Delete threat model metadata by key",
        "description": "Deletes a specific metadata entry by key for the specified threat model",
        "operationId": "deleteThreatModelMetadataByKey",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 255
            },
            "description": "Metadata key to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Metadata entry deleted successfully"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/threat_models/{threat_model_id}/metadata/bulk": {
      "post": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Bulk create threat model metadata",
        "description": "Creates multiple metadata entries in a single operation for the specified threat model",
        "operationId": "bulkCreateThreatModelMetadata",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Metadata"
                },
                "maxItems": 20
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Metadata entries created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Metadata"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/threat_models/{threat_model_id}/diagrams": {
      "get": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "List threat model diagrams",
        "description": "Returns all diagrams associated with a specific threat model",
        "operationId": "getThreatModelDiagrams",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Maximum number of items to return"
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "Number of items to skip"
          }
        ],
        "responses": {
          "200": {
            "description": "List of diagrams",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DiagramListItem"
                  }
                },
                "example": [
                  {
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "name": "System Architecture Diagram",
                    "type": "DFD-1.0.0"
                  },
                  {
                    "id": "456e7890-e89b-12d3-a456-426614174001",
                    "name": "Data Flow Diagram",
                    "type": "DFD-1.0.0"
                  }
                ]
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Create a new diagram",
        "description": "Creates a new diagram within the specified threat model",
        "operationId": "createThreatModelDiagram",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDiagramRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Diagram created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Diagram"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/threat_models/{threat_model_id}/diagrams/{diagram_id}": {
      "get": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Get a specific diagram",
        "description": "Retrieves a specific diagram from the threat model",
        "operationId": "getThreatModelDiagram",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "diagram_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the diagram (UUID)"
          }
        ],
        "responses": {
          "200": {
            "description": "Diagram details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Diagram"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Update a diagram",
        "description": "Completely replaces a diagram with new data",
        "operationId": "updateThreatModelDiagram",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "diagram_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the diagram (UUID)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Diagram"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Diagram updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Diagram"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "patch": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Partially update a diagram",
        "description": "Apply JSON Patch operations to update specific parts of a diagram",
        "operationId": "patchThreatModelDiagram",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "diagram_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the diagram (UUID)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "op": {
                      "type": "string",
                      "enum": [
                        "add",
                        "remove",
                        "replace",
                        "move",
                        "copy",
                        "test"
                      ]
                    },
                    "path": {
                      "type": "string"
                    },
                    "value": {},
                    "from": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "op",
                    "path"
                  ]
                }
              },
              "examples": {
                "updateName": {
                  "summary": "Update diagram name",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/name",
                      "value": "Updated Diagram Name"
                    }
                  ]
                },
                "addCell": {
                  "summary": "Add a new cell to the diagram",
                  "value": [
                    {
                      "op": "add",
                      "path": "/cells/-",
                      "value": {
                        "id": "new-cell-id",
                        "shape": "process",
                        "x": 100,
                        "y": 100,
                        "width": 120,
                        "height": 60,
                        "label": "New Process"
                      }
                    }
                  ]
                },
                "addMetadata": {
                  "summary": "Add metadata to diagram",
                  "value": [
                    {
                      "op": "add",
                      "path": "/metadata/-",
                      "value": {
                        "key": "version",
                        "value": "2.0"
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Diagram updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Diagram"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "422": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Delete a diagram",
        "description": "Permanently removes a diagram from the threat model",
        "operationId": "deleteThreatModelDiagram",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "diagram_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the diagram (UUID)"
          }
        ],
        "responses": {
          "204": {
            "description": "Diagram deleted successfully"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/threat_models/{threat_model_id}/diagrams/{diagram_id}/collaborate": {
      "get": {
        "tags": [
          "Collaboration"
        ],
        "summary": "Get diagram collaboration session",
        "description": "Retrieves the current collaboration session details for a diagram",
        "operationId": "getDiagramCollaborationSession",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "diagram_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the diagram (UUID)"
          }
        ],
        "responses": {
          "200": {
            "description": "Collaboration session details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollaborationSession"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "tags": [
          "Collaboration"
        ],
        "summary": "Start diagram collaboration session",
        "description": "Creates a new collaboration session for real-time diagram editing",
        "operationId": "startDiagramCollaborationSession",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "diagram_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the diagram (UUID)"
          }
        ],
        "responses": {
          "201": {
            "description": "Collaboration session started successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollaborationSession"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "409": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Collaboration"
        ],
        "summary": "End diagram collaboration session",
        "description": "Terminates the active collaboration session for a diagram",
        "operationId": "endDiagramCollaborationSession",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "diagram_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the diagram (UUID)"
          }
        ],
        "responses": {
          "204": {
            "description": "Collaboration session ended successfully"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/threat_models/{threat_model_id}/diagrams/{diagram_id}/metadata": {
      "get": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Get diagram metadata",
        "description": "Retrieves all metadata entries for the specified diagram",
        "operationId": "getDiagramMetadata",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "diagram_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the diagram (UUID)"
          }
        ],
        "responses": {
          "200": {
            "description": "List of metadata entries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Metadata"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Create diagram metadata",
        "description": "Creates a new metadata entry for the specified diagram",
        "operationId": "createDiagramMetadata",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "diagram_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the diagram (UUID)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Metadata"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Metadata entry created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metadata"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/threat_models/{threat_model_id}/diagrams/{diagram_id}/metadata/{key}": {
      "get": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Get diagram metadata by key",
        "description": "Retrieves a specific metadata entry for the diagram by key",
        "operationId": "getDiagramMetadataByKey",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "diagram_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the diagram (UUID)"
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 256
            },
            "description": "Metadata key to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata entry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metadata"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Update diagram metadata by key",
        "description": "Updates or creates a metadata entry for the diagram with the specified key",
        "operationId": "updateDiagramMetadataByKey",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "diagram_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the diagram (UUID)"
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 256
            },
            "description": "Metadata key to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "string",
                    "maxLength": 1024,
                    "description": "Metadata value"
                  }
                },
                "required": [
                  "value"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Metadata entry updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metadata"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Delete diagram metadata by key",
        "description": "Removes a specific metadata entry for the diagram by key",
        "operationId": "deleteDiagramMetadataByKey",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "diagram_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the diagram (UUID)"
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 256
            },
            "description": "Metadata key to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Metadata entry deleted successfully"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/threat_models/{threat_model_id}/diagrams/{diagram_id}/metadata/bulk": {
      "post": {
        "tags": [
          "Threat Model Sub-Resources"
        ],
        "summary": "Bulk create diagram metadata",
        "description": "Creates multiple metadata entries in a single operation for the specified diagram",
        "operationId": "bulkCreateDiagramMetadata",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "diagram_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the diagram (UUID)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Metadata"
                },
                "maxItems": 20
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Metadata entries created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Metadata"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    }
  }
}
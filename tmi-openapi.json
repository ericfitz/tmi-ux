{
  "openapi": "3.0.3",
  "info": {
    "title": "TMI (Threat Modeling Improved) API",
    "description": "A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries.",
    "version": "1.0.0"
  },
  "externalDocs": {
    "description": "Find more information here",
    "url": ""
  },
  "servers": [
    {
      "url": "https://api.tmi.example.com",
      "description": "Production server"
    },
    {
      "url": "http://localhost:4200",
      "description": "Local development server"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT token for authenticated requests"
      }
    },
    "schemas": {
      "ApiInfo": {
        "type": "object",
        "description": "API information response for the root endpoint",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "enum": ["OK", "ERROR"],
                "description": "Status code indicating if the API is functioning correctly"
              },
              "time": {
                "type": "string",
                "format": "date-time",
                "description": "Current server time in UTC, formatted as RFC 3339"
              }
            },
            "required": ["code", "time"]
          },
          "service": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the service"
              },
              "build": {
                "type": "string",
                "description": "Current build number",
                "maxLength": 256
              }
            },
            "required": ["name", "build"]
          },
          "api": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "description": "API version"
              },
              "specification": {
                "type": "string",
                "format": "uri",
                "description": "URL to the API specification",
                "maxLength": 1024
              }
            },
            "required": ["version", "specification"]
          },
          "operator": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Operator name from environment variables",
                "maxLength": 256
              },
              "contact": {
                "type": "string",
                "description": "Operator contact information from environment variables",
                "maxLength": 1024
              }
            },
            "required": ["name", "contact"]
          }
        },
        "required": ["status", "service", "api", "operator"],
        "example": {
          "status": {
            "code": "OK",
            "time": "2025-04-09T12:00:00Z"
          },
          "service": {
            "name": "TMI",
            "build": "1.0.0-386eea0"
          },
          "api": {
            "version": "1.0",
            "specification": "https://github.com/ericfitz/tmi/blob/main/tmi-openapi.json"
          },
          "operator": {
            "name": "Example Organization",
            "contact": "api-support@example.com"
          }
        }
      },
      "Document": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the document (UUID)",
            "maxLength": 36,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Document name",
            "maxLength": 256
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "URL location of the document",
            "maxLength": 1024
          },
          "description": {
            "type": "string",
            "description": "Description of document purpose or content",
            "maxLength": 1024,
            "nullable": true
          },
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Metadata"
            },
            "description": "Key-value pairs for additional document metadata"
          }
        },
        "required": ["name", "url"],
        "example": {
          "id": "6ba7b810-9dad-11d1-beef-00c04fd430c8",
          "name": "Example Application Design",
          "url": "https://example.com/design.pdf",
          "description": "Technical design document for the Example application",
          "metadata": [
            {
              "key": "document_type",
              "value": "technical_specification"
            },
            {
              "key": "version",
              "value": "1.2"
            }
          ]
        }
      },
      "Source": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the source code reference (UUID)",
            "maxLength": 36,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Name for the source code reference",
            "maxLength": 256
          },
          "description": {
            "type": "string",
            "description": "Description of the referenced source code",
            "maxLength": 1024,
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "Source code repository type",
            "enum": ["git", "svn", "mercurial", "other"],
            "maxLength": 16
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "URL to retrieve the referenced source code",
            "maxLength": 1024
          },
          "parameters": {
            "type": "object",
            "description": "repo-specific parameters for retrieving the source",
            "properties": {
              "refType": {
                "type": "string",
                "enum": ["branch", "tag", "commit"],
                "description": "Reference type (branch, tag, or commit)",
                "maxLength": 6
              },
              "refValue": {
                "type": "string",
                "description": "Reference value (branch name, tag value, or commit id)",
                "maxLength": 256
              },
              "subPath": {
                "type": "string",
                "description": "Sub-path within the repository",
                "maxLength": 256
              }
            },
            "required": ["refType", "refValue"]
          },
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Metadata"
            },
            "description": "Key-value pairs for additional source metadata"
          }
        },
        "required": ["url"],
        "example": {
          "id": "6ba7b810-1dad-11d1-8080-00c04fd430c8",
          "name": "GitHub Repo",
          "description": "Technical design document for the Example application",
          "type": "git",
          "url": "https://github.com/ericfitz/tmi-ux.git",
          "parameters": {
            "refType": "branch",
            "refValue": "main"
          },
          "metadata": []
        }
      },
      "BaseDiagram": {
        "type": "object",
        "description": "Base diagram object with common properties",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the diagram (UUID)",
            "maxLength": 36,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Name of the diagram",
            "maxLength": 256
          },
          "type": {
            "type": "string",
            "description": "Type of diagram with version",
            "enum": ["DFD-1.0.0"],
            "maxLength": 64
          },
          "description": {
            "type": "string",
            "description": "Description of the diagram",
            "maxLength": 1024
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp (ISO3339)",
            "maxLength": 36
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "description": "Last modification timestamp (ISO3339)",
            "maxLength": 36
          },
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Metadata"
            },
            "description": "Key-value pairs for additional diagram metadata"
          }
        },
        "required": ["id", "name", "type", "created_at", "modified_at"],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "DFD-1.0.0": "#/components/schemas/DfdDiagram"
          }
        }
      },
      "DfdDiagram": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseDiagram"
          },
          {
            "type": "object",
            "description": "Data Flow Diagram (DFD) with cells",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["DFD-1.0.0"],
                "description": "DFD diagram type with version"
              },
              "cells": {
                "type": "array",
                "items": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/Node" },
                    { "$ref": "#/components/schemas/Edge" }
                  ]
                },
                "description": "List of diagram cells (nodes and edges) following X6 structure"
              }
            },
            "required": ["cells"]
          }
        ]
      },
      "Diagram": {
        "oneOf": [{ "$ref": "#/components/schemas/DfdDiagram" }],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "DFD-1.0.0": "#/components/schemas/DfdDiagram"
          }
        },
        "example": {
          "id": "359314D9-B6A3-460B-805F-B82190D7290F",
          "type": "DFD-1.0.0",
          "name": "Workflow Diagram",
          "description": "A process workflow",
          "created_at": "2025-04-06T12:00:00Z",
          "modified_at": "2025-04-06T12:30:00Z",
          "metadata": [],
          "cells": [
            {
              "id": "233598D2-8C6D-4A73-AFE1-647081C4F7AA",
              "shape": "process",
              "x": 100,
              "y": 100,
              "width": 120,
              "height": 60,
              "zIndex": 10,
              "visible": true,
              "attrs": {
                "body": {
                  "fill": "#ffffff",
                  "stroke": "#000000",
                  "strokeWidth": 2
                },
                "text": {
                  "text": "Process Data",
                  "fontSize": 14,
                  "fill": "#000000"
                }
              },
              "ports": {
                "groups": {
                  "in": { "position": "left" },
                  "out": { "position": "right" }
                },
                "items": [
                  { "id": "port_in_1", "group": "in" },
                  { "id": "port_out_1", "group": "out" }
                ]
              },
              "data": []
            },
            {
              "id": "456789AB-CD12-34EF-56GH-789012345678",
              "shape": "edge",
              "source": {
                "cell": "233598D2-8C6D-4A73-AFE1-647081C4F7AA",
                "port": "port_out_1"
              },
              "target": {
                "cell": "789ABC12-3456-78DE-F012-3456789ABCDE"
              },
              "zIndex": 1,
              "visible": true,
              "attrs": {
                "line": {
                  "stroke": "#808080",
                  "strokeWidth": 1,
                  "targetMarker": {
                    "name": "classic",
                    "size": 8
                  }
                }
              },
              "labels": [
                {
                  "attrs": {
                    "text": {
                      "text": "Data Flow",
                      "fontSize": 12,
                      "fill": "#333333"
                    }
                  },
                  "position": 0.5
                }
              ],
              "vertices": [],
              "data": []
            }
          ]
        }
      },
      "Cell": {
        "type": "object",
        "description": "Base schema for all diagram cells (nodes and edges) fully compatible with AntV X6 graph library. This schema includes all X6 native properties plus convenience properties for easier integration. X6-specific properties like markup, tools, router, and connector are supported for advanced customization.",
        "discriminator": {
          "propertyName": "shape"
        },
        "required": ["id", "shape"],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the cell (UUID)",
            "format": "uuid",
            "example": "37EAEDFA-BF37-4996-8665-242FEC34BBFF",
            "maxLength": 36
          },
          "shape": {
            "type": "string",
            "description": "Shape type identifier that determines cell structure and behavior",
            "example": "process"
          },
          "zIndex": {
            "type": "number",
            "description": "Z-order layer for rendering (higher values render on top)",
            "default": 1,
            "minimum": 0
          },
          "visible": {
            "type": "boolean",
            "description": "Whether the cell is visible in the diagram",
            "default": true
          },
          "data": {
            "type": "object",
            "description": "Flexible data storage compatible with X6, with reserved metadata namespace",
            "properties": {
              "_metadata": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Metadata"
                },
                "description": "Reserved namespace for structured business metadata"
              }
            },
            "additionalProperties": true,
            "default": {
              "_metadata": []
            }
          },
          "markup": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarkupElement"
            },
            "description": "SVG/HTML markup definition for custom shape rendering in X6"
          },
          "tools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CellTool"
            },
            "description": "Interactive tools attached to the cell for user interaction"
          }
        }
      },
      "Node": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Cell"
          },
          {
            "type": "object",
            "description": "A diagram node representing an entity, process, store, or boundary. Fully compatible with X6 Node objects and supports both X6 native properties (markup, tools) and convenience properties (label, position, size, style) for easier integration.",
            "required": ["x", "y", "width", "height"],
            "properties": {
              "shape": {
                "type": "string",
                "enum": ["actor", "process", "store", "security-boundary", "text-box"],
                "description": "Node type determining its visual representation and behavior"
              },
              "x": {
                "type": "number",
                "description": "X coordinate of the node's position"
              },
              "y": {
                "type": "number",
                "description": "Y coordinate of the node's position"
              },
              "width": {
                "type": "number",
                "description": "Width of the node in pixels",
                "minimum": 40
              },
              "height": {
                "type": "number",
                "description": "Height of the node in pixels",
                "minimum": 30
              },
              "angle": {
                "type": "number",
                "description": "Rotation angle in degrees",
                "default": 0
              },
              "attrs": {
                "$ref": "#/components/schemas/NodeAttrs",
                "description": "Visual styling attributes for the node"
              },
              "ports": {
                "$ref": "#/components/schemas/PortConfiguration",
                "description": "Port configuration for connections"
              },
              "parent": {
                "type": "string",
                "format": "uuid",
                "description": "ID of the parent cell for nested/grouped nodes (UUID)",
                "nullable": true,
                "maxLength": 36
              },
              "label": {
                "type": "string",
                "description": "Convenience property: Simple text label that automatically creates appropriate attrs.text.text structure",
                "maxLength": 256
              },
              "position": {
                "type": "object",
                "description": "Convenience property: Position as a single object (alternative to separate x/y properties)",
                "properties": {
                  "x": {
                    "type": "number",
                    "description": "X coordinate"
                  },
                  "y": {
                    "type": "number",
                    "description": "Y coordinate"
                  }
                },
                "required": ["x", "y"]
              },
              "size": {
                "type": "object",
                "description": "Convenience property: Size as a single object (alternative to separate width/height properties)",
                "properties": {
                  "width": {
                    "type": "number",
                    "description": "Width in pixels",
                    "minimum": 40
                  },
                  "height": {
                    "type": "number",
                    "description": "Height in pixels",
                    "minimum": 30
                  }
                },
                "required": ["width", "height"]
              },
              "style": {
                "type": "object",
                "description": "Convenience property: Simplified styling options that automatically create appropriate attrs structure",
                "properties": {
                  "fill": {
                    "type": "string",
                    "description": "Background fill color",
                    "maxLength": 32
                  },
                  "stroke": {
                    "type": "string",
                    "description": "Border/outline color",
                    "maxLength": 32
                  },
                  "strokeWidth": {
                    "type": "number",
                    "description": "Border/outline width in pixels",
                    "minimum": 0
                  },
                  "fontSize": {
                    "type": "number",
                    "description": "Text font size in pixels",
                    "minimum": 1
                  },
                  "fontColor": {
                    "type": "string",
                    "description": "Text color",
                    "maxLength": 32
                  }
                }
              }
            },
            "example": {
              "id": "233598D2-8C6D-4A73-AFE1-647081C4F7AA",
              "shape": "process",
              "x": 100,
              "y": 100,
              "width": 120,
              "height": 60,
              "zIndex": 10,
              "visible": true,
              "attrs": {
                "body": {
                  "fill": "#ffffff",
                  "stroke": "#000000",
                  "strokeWidth": 2
                },
                "text": {
                  "text": "Process Data",
                  "fontSize": 14,
                  "fill": "#000000"
                }
              },
              "ports": {
                "groups": {
                  "in": { "position": "left" },
                  "out": { "position": "right" }
                },
                "items": [
                  { "id": "port_in_1", "group": "in" },
                  { "id": "port_out_1", "group": "out" }
                ]
              },
              "data": {
                "_metadata": [
                  { "key": "category", "value": "business-process" },
                  { "key": "owner", "value": "engineering-team" }
                ],
                "customValidation": {
                  "rules": ["required-input", "sanitize-output"],
                  "level": "strict"
                }
              },
              "markup": [
                {
                  "tagName": "rect",
                  "selector": "body",
                  "attrs": {
                    "rx": 5,
                    "ry": 5
                  }
                },
                {
                  "tagName": "text",
                  "selector": "label"
                }
              ],
              "tools": [
                {
                  "name": "boundary",
                  "args": {
                    "padding": 5
                  }
                }
              ]
            }
          }
        ]
      },
      "Edge": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Cell"
          },
          {
            "type": "object",
            "description": "A diagram edge representing a connection or data flow between nodes. Fully compatible with X6 Edge objects and supports X6 routing algorithms (manhattan, orth, oneSide, metro, er), connector styles (normal, rounded, smooth, jumpover), custom markup, tools, and convenience properties (label, style) for easier integration.",
            "required": ["source", "target"],
            "properties": {
              "shape": {
                "type": "string",
                "enum": ["edge"],
                "description": "Edge type identifier"
              },
              "source": {
                "$ref": "#/components/schemas/EdgeTerminal",
                "description": "Source connection point"
              },
              "target": {
                "$ref": "#/components/schemas/EdgeTerminal",
                "description": "Target connection point"
              },
              "attrs": {
                "$ref": "#/components/schemas/EdgeAttrs",
                "description": "Visual styling attributes for the edge"
              },
              "labels": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EdgeLabel"
                },
                "description": "Text labels positioned along the edge"
              },
              "vertices": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Point"
                },
                "description": "Intermediate waypoints for edge routing"
              },
              "router": {
                "$ref": "#/components/schemas/EdgeRouter",
                "description": "Edge routing algorithm configuration for path calculation"
              },
              "connector": {
                "$ref": "#/components/schemas/EdgeConnector",
                "description": "Edge connector style configuration for visual appearance"
              },
              "defaultLabel": {
                "$ref": "#/components/schemas/EdgeLabel",
                "description": "Default label configuration applied to edges without explicit labels"
              },
              "label": {
                "type": "string",
                "description": "Convenience property: Simple text label that automatically creates appropriate attrs.text.text structure",
                "maxLength": 256
              },
              "style": {
                "type": "object",
                "description": "Convenience property: Simplified styling options that automatically create appropriate attrs structure",
                "properties": {
                  "stroke": {
                    "type": "string",
                    "description": "Line color",
                    "maxLength": 32
                  },
                  "strokeWidth": {
                    "type": "number",
                    "description": "Line width in pixels",
                    "minimum": 0
                  },
                  "strokeDasharray": {
                    "type": "string",
                    "description": "Line dash pattern (e.g., '5 5' for dashed)",
                    "maxLength": 64
                  },
                  "fontSize": {
                    "type": "number",
                    "description": "Label font size in pixels",
                    "minimum": 1
                  },
                  "fontColor": {
                    "type": "string",
                    "description": "Label text color",
                    "maxLength": 32
                  }
                }
              }
            },
            "example": {
              "id": "456789AB-CD12-34EF-56GH-789012345678",
              "shape": "edge",
              "source": {
                "cell": "233598D2-8C6D-4A73-AFE1-647081C4F7AA",
                "port": "port_out_1"
              },
              "target": {
                "cell": "789ABC12-3456-78DE-F012-3456789ABCDE"
              },
              "zIndex": 1,
              "visible": true,
              "attrs": {
                "line": {
                  "stroke": "#808080",
                  "strokeWidth": 1,
                  "targetMarker": {
                    "name": "classic",
                    "size": 8
                  }
                }
              },
              "labels": [
                {
                  "attrs": {
                    "text": {
                      "text": "Data Flow",
                      "fontSize": 12,
                      "fill": "#333333"
                    }
                  },
                  "position": 0.5
                }
              ],
              "vertices": [],
              "data": {
                "_metadata": [
                  { "key": "flow-type", "value": "data" },
                  { "key": "sensitivity", "value": "public" }
                ],
                "routingHints": {
                  "preferredPath": "shortest",
                  "avoidOverlap": true
                }
              },
              "router": {
                "name": "manhattan",
                "args": {
                  "step": 10,
                  "padding": 20
                }
              },
              "connector": {
                "name": "rounded",
                "args": {
                  "radius": 5
                }
              }
            }
          }
        ]
      },
      "ThreatModel": {
        "type": "object",
        "description": "A threat model object for documenting threats",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the threat model (UUID)",
            "maxLength": 36,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Name of the threat model",
            "maxLength": 256
          },
          "description": {
            "type": "string",
            "description": "Description of the threat model",
            "maxLength": 1024
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp (RFC3339)",
            "maxLength": 24
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "description": "Last modification timestamp (RFC3339)",
            "maxLength": 24
          },
          "owner": {
            "type": "string",
            "description": "Username or identifier of the current owner (may be email address or other format)"
          },
          "created_by": {
            "type": "string",
            "description": "Username or identifier of the creator of the threat model",
            "maxLength": 256
          },
          "threat_model_framework": {
            "type": "string",
            "enum": ["CIA", "STRIDE", "LINDDUN", "DIE", "PLOT4ai"],
            "description": "The framework used for this threat model"
          },
          "issue_url": {
            "type": "string",
            "format": "uri",
            "description": "URL to an issue in an issue tracking system for this threat model",
            "maxLength": 1024
          },
          "authorization": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Authorization"
            },
            "description": "List of users and their roles for this threat model"
          },
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Metadata"
            },
            "description": "Key-value pairs for additional threat model metadata"
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Document"
            },
            "description": "List of documents related to the threat model"
          },
          "sourceCode": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Source"
            },
            "description": "List of source code repositories related to the threat model"
          },
          "diagrams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Diagram"
            },
            "description": "List of diagram objects associated with this threat model"
          },
          "threats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Threat"
            },
            "description": "List of threats within the threat model"
          }
        },
        "required": [
          "id",
          "name",
          "created_at",
          "modified_at",
          "owner",
          "authorization",
          "created_by",
          "threat_model_framework"
        ],
        "example": {
          "id": "F898D276-DE86-4837-9B5E-C46E1A08EAB6",
          "name": "System Threat Model",
          "description": "Threats for system X",
          "created_at": "2025-04-06T12:00:00Z",
          "modified_at": "2025-04-06T12:00:00Z",
          "owner": "user@example.com",
          "created_by": "user@example.com",
          "threat_model_framework": "STRIDE",
          "issue_url": "https://issues.example.com/browse/TM-123",
          "authorization": [
            {
              "subject": "user@example.com",
              "role": "owner"
            }
          ],
          "metadata": [],
          "documents": [
            {
              "id": "3ba7b810-9dad-11d1-beef-00c04fd430c8",
              "name": "System Architecture Document",
              "url": "https://docs.example.com/system-architecture.pdf",
              "description": "Technical architecture documentation for the system",
              "metadata": [
                {
                  "key": "document_type",
                  "value": "architecture"
                },
                {
                  "key": "version",
                  "value": "2.1"
                }
              ]
            }
          ],
          "sourceCode": [
            {
              "id": "6ba7b810-1dad-11d1-8080-00c04fd430c8",
              "name": "GitHub Repo",
              "description": "Source code for the tmi-ux application",
              "type": "git",
              "url": "https://github.com/ericfitz/tmi-ux.git",
              "parameters": {
                "refType": "branch",
                "refValue": "main"
              },
              "metadata": [
                {
                  "key": "environment",
                  "value": "production"
                },
                {
                  "key": "team",
                  "value": "security"
                }
              ]
            }
          ],
          "diagrams": [
            {
              "id": "22DB9004-435D-4765-9E41-0291AA8FE15A",
              "type": "DFD-1.0.0",
              "name": "System Overview Diagram",
              "description": "Main system data flow diagram",
              "created_at": "2025-04-06T12:00:00Z",
              "modified_at": "2025-04-06T12:30:00Z",
              "metadata": [],
              "cells": []
            }
          ],
          "threats": [
            {
              "id": "EC464A19-D1CA-4B72-AD8D-055AD2073C2B",
              "threat_model_id": "B7946A3A-5581-42C6-91BF-F41A1E1DD535",
              "name": "Data Breach",
              "description": "Unauthorized data access",
              "mitigation": "Recommendation: implement least privilege authorization policy",
              "created_at": "2025-04-06T12:01:00Z",
              "modified_at": "2025-04-06T12:01:00Z",
              "diagram_id": "",
              "cell_id": "",
              "severity": "High",
              "score": 7.5,
              "priority": "High",
              "mitigated": false,
              "status": "Open",
              "threat_type": "Information Disclosure",
              "issue_url": "https://issues.example.com/browse/SEC-456",
              "metadata": []
            }
          ]
        }
      },
      "Threat": {
        "type": "object",
        "description": "A threat within a threat model",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the threat (UUID)",
            "maxLength": 36,
            "readOnly": true
          },
          "threat_model_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the parent threat model (UUID)",
            "maxLength": 36
          },
          "name": {
            "type": "string",
            "description": "Name of the threat",
            "maxLength": 256
          },
          "description": {
            "type": "string",
            "description": "Description of the threat and risk to the organization",
            "maxLength": 1024
          },
          "mitigation": {
            "type": "string",
            "description": "Recommended or planned mitigation(s) for the threat",
            "maxLength": 1024
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp (RFC3339)",
            "maxLength": 24
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "description": "Last modification timestamp (RFC3339)",
            "maxLength": 24
          },
          "diagram_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the associated diagram (if applicable) (UUID)",
            "nullable": true,
            "maxLength": 36
          },
          "cell_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the associated cell (if applicable) (UUID)",
            "nullable": true,
            "maxLength": 36
          },
          "severity": {
            "type": "string",
            "enum": ["Unknown", "None", "Low", "Medium", "High", "Critical"],
            "description": "Severity level of the threat"
          },
          "score": {
            "type": "number",
            "description": "Numeric score representing the risk or impact of the threat",
            "minimum": 0.0,
            "maximum": 10.0
          },
          "priority": {
            "type": "string",
            "description": "Priority level for addressing the threat",
            "maxLength": 16
          },
          "mitigated": {
            "type": "boolean",
            "description": "Whether the threat has been mitigated"
          },
          "status": {
            "type": "string",
            "description": "Current status of the threat",
            "maxLength": 256
          },
          "threat_type": {
            "type": "string",
            "description": "Type or category of the threat",
            "maxLength": 256
          },
          "issue_url": {
            "type": "string",
            "format": "uri",
            "description": "URL to an issue in an issue tracking system for this threat",
            "maxLength": 1024
          },
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Metadata"
            },
            "description": "Key-value pairs for additional threat metadata"
          }
        },
        "required": [
          "id",
          "threat_model_id",
          "name",
          "created_at",
          "modified_at",
          "severity",
          "priority",
          "mitigated",
          "status",
          "threat_type"
        ]
      },
      "Authorization": {
        "type": "object",
        "description": "A user-role pair defining access permissions",
        "properties": {
          "subject": {
            "type": "string",
            "description": "Username or identifier of the user (may be email address or other format)",
            "maxLength": 256
          },
          "role": {
            "type": "string",
            "enum": ["reader", "writer", "owner"],
            "description": "Role: reader (view), writer (edit), owner (full control)",
            "maxLength": 6
          }
        },
        "required": ["subject", "role"]
      },
      "Metadata": {
        "type": "object",
        "description": "A key-value pair for extensible metadata",
        "properties": {
          "key": {
            "type": "string",
            "description": "Metadata key",
            "maxLength": 256
          },
          "value": {
            "type": "string",
            "description": "Metadata value",
            "maxLength": 1024
          }
        },
        "required": ["key", "value"]
      },
      "Error": {
        "type": "object",
        "description": "Standard error response format",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error code"
          },
          "error_description": {
            "type": "string",
            "description": "Human-readable error description"
          },
          "error_uri": {
            "type": "string",
            "format": "uri",
            "description": "URI to documentation about the error"
          }
        },
        "required": ["error", "error_description"],
        "example": {
          "error": "invalid_request",
          "error_description": "The request is missing a required parameter",
          "error_uri": "https://docs.example.com/auth/errors/invalid_request"
        }
      },
      "AuthTokenResponse": {
        "type": "object",
        "description": "JWT token response for authentication endpoints",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "JWT access token"
          },
          "refresh_token": {
            "type": "string",
            "description": "Refresh token for obtaining new access tokens"
          },
          "token_type": {
            "type": "string",
            "enum": ["Bearer"],
            "description": "Token type"
          },
          "expires_in": {
            "type": "integer",
            "description": "Access token expiration time in seconds"
          }
        },
        "required": ["access_token", "refresh_token", "token_type", "expires_in"],
        "example": {
          "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
          "refresh_token": "def456...",
          "token_type": "Bearer",
          "expires_in": 3600
        }
      },
      "CollaborationSession": {
        "type": "object",
        "description": "Details of an active collaboration session for a diagram",
        "properties": {
          "session_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the session (UUID)",
            "maxLength": 36,
            "readOnly": true
          },
          "threat_model_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the associated threat model (UUID)",
            "maxLength": 36
          },
          "diagram_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the associated diagram (UUID)",
            "maxLength": 36
          },
          "participants": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "A participant in the session",
              "properties": {
                "user_id": {
                  "type": "string",
                  "description": "Username or identifier of the participant (may be email address or other format)",
                  "maxLength": 256
                },
                "joined_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Join timestamp",
                  "maxLength": 36
                }
              }
            },
            "description": "List of active participants"
          },
          "websocket_url": {
            "type": "string",
            "description": "WebSocket URL for real-time updates",
            "maxLength": 1024
          }
        },
        "required": [
          "session_id",
          "threat_model_id",
          "diagram_id",
          "participants",
          "websocket_url"
        ],
        "example": {
          "session_id": "D7744D3A-ED22-40AF-862B-29786CAD0007",
          "threat_model_id": "5311D207-AFD5-4A1A-BA83-14C1445DC257",
          "diagram_id": "DFF7F4A9-CBCE-4001-9198-2706C86F7EF3",
          "participants": [
            {
              "user_id": "user@example.com",
              "joined_at": "2025-04-06T12:02:00Z"
            }
          ],
          "websocket_url": "wss://api.example.com/threat_models/5311D207-AFD5-4A1A-BA83-14C1445DC257/diagrams/DFF7F4A9-CBCE-4001-9198-2706C86F7EF3/ws"
        }
      },
      "ListItem": {
        "type": "object",
        "description": "A simplified item for list endpoints, containing name and ID",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the resource",
            "maxLength": 256
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the resource (UUID)",
            "maxLength": 36,
            "readOnly": true
          }
        },
        "required": ["name", "id"]
      },
      "Point": {
        "type": "object",
        "description": "A 2D point with x and y coordinates",
        "required": ["x", "y"],
        "properties": {
          "x": {
            "type": "number",
            "description": "X coordinate"
          },
          "y": {
            "type": "number",
            "description": "Y coordinate"
          }
        },
        "example": {
          "x": 100,
          "y": 200
        }
      },
      "EdgeTerminal": {
        "type": "object",
        "description": "Connection point for an edge (source or target)",
        "required": ["cell"],
        "properties": {
          "cell": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the connected node (UUID)",
            "maxLength": 36
          },
          "port": {
            "type": "string",
            "description": "ID of the specific port on the node (optional)",
            "nullable": true,
            "maxLength": 64
          }
        },
        "example": {
          "cell": "233598D2-8C6D-4A73-AFE1-647081C4F7AA",
          "port": "port_out_1"
        }
      },
      "NodeAttrs": {
        "type": "object",
        "description": "Visual attributes for a node",
        "properties": {
          "body": {
            "type": "object",
            "description": "Body/shape styling attributes",
            "properties": {
              "fill": {
                "type": "string",
                "description": "Fill color",
                "maxLength": 32
              },
              "stroke": {
                "type": "string",
                "description": "Stroke color",
                "maxLength": 32
              },
              "strokeWidth": {
                "type": "number",
                "description": "Stroke width in pixels",
                "minimum": 0
              },
              "strokeDasharray": {
                "type": "string",
                "description": "Dash pattern for strokes",
                "nullable": true,
                "maxLength": 64
              }
            }
          },
          "text": {
            "type": "object",
            "description": "Text/label styling attributes",
            "properties": {
              "text": {
                "type": "string",
                "description": "Label text content",
                "maxLength": 256
              },
              "fontSize": {
                "type": "number",
                "description": "Font size in pixels",
                "minimum": 1
              },
              "fill": {
                "type": "string",
                "description": "Text color",
                "maxLength": 32
              },
              "fontFamily": {
                "type": "string",
                "description": "Font family",
                "maxLength": 64
              }
            }
          }
        }
      },
      "EdgeAttrs": {
        "type": "object",
        "description": "Visual attributes for an edge",
        "properties": {
          "line": {
            "type": "object",
            "description": "Line styling attributes",
            "properties": {
              "stroke": {
                "type": "string",
                "description": "Line color",
                "maxLength": 32
              },
              "strokeWidth": {
                "type": "number",
                "description": "Line width in pixels",
                "minimum": 0
              },
              "strokeDasharray": {
                "type": "string",
                "description": "Dash pattern for the line",
                "nullable": true,
                "maxLength": 64
              },
              "targetMarker": {
                "type": "object",
                "description": "Arrowhead marker configuration",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Marker type",
                    "enum": ["classic", "block", "diamond", "circle"],
                    "maxLength": 32
                  },
                  "size": {
                    "type": "number",
                    "description": "Marker size in pixels",
                    "minimum": 1
                  }
                }
              },
              "sourceMarker": {
                "type": "object",
                "description": "Source marker configuration",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Marker type",
                    "enum": ["classic", "block", "diamond", "circle"],
                    "maxLength": 32
                  },
                  "size": {
                    "type": "number",
                    "description": "Marker size in pixels",
                    "minimum": 1
                  }
                }
              }
            }
          }
        }
      },
      "EdgeLabel": {
        "type": "object",
        "description": "Label positioned along an edge",
        "properties": {
          "attrs": {
            "type": "object",
            "description": "Label styling attributes",
            "properties": {
              "text": {
                "type": "object",
                "description": "Text styling",
                "properties": {
                  "text": {
                    "type": "string",
                    "description": "Label text content",
                    "maxLength": 256
                  },
                  "fontSize": {
                    "type": "number",
                    "description": "Font size in pixels",
                    "minimum": 1
                  },
                  "fill": {
                    "type": "string",
                    "description": "Text color",
                    "maxLength": 32
                  },
                  "fontFamily": {
                    "type": "string",
                    "description": "Font family",
                    "maxLength": 64
                  }
                }
              }
            }
          },
          "position": {
            "type": "number",
            "description": "Position along the edge (0 = start, 1 = end)",
            "minimum": 0,
            "maximum": 1
          }
        },
        "example": {
          "attrs": {
            "text": {
              "text": "Data Flow",
              "fontSize": 12,
              "fill": "#333333"
            }
          },
          "position": 0.5
        }
      },
      "PortConfiguration": {
        "type": "object",
        "description": "Port configuration for node connections",
        "properties": {
          "groups": {
            "type": "object",
            "description": "Port group definitions",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "position": {
                  "type": "string",
                  "enum": ["top", "right", "bottom", "left"],
                  "description": "Port position on the node"
                }
              }
            }
          },
          "items": {
            "type": "array",
            "description": "Individual port instances",
            "items": {
              "type": "object",
              "required": ["id", "group"],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique port identifier",
                  "maxLength": 64
                },
                "group": {
                  "type": "string",
                  "description": "Port group this port belongs to",
                  "maxLength": 32
                }
              }
            }
          }
        },
        "example": {
          "groups": {
            "in": { "position": "left" },
            "out": { "position": "right" }
          },
          "items": [
            { "id": "port_in_1", "group": "in" },
            { "id": "port_out_1", "group": "out" }
          ]
        }
      },
      "PaginatedResponse": {
        "type": "object",
        "description": "Paginated response wrapper for list endpoints",
        "properties": {
          "data": {
            "type": "array",
            "description": "Array of items for the current page"
          },
          "pagination": {
            "type": "object",
            "description": "Pagination metadata",
            "properties": {
              "total": {
                "type": "integer",
                "description": "Total number of items across all pages",
                "minimum": 0
              },
              "limit": {
                "type": "integer",
                "description": "Maximum number of items per page",
                "minimum": 1
              },
              "offset": {
                "type": "integer",
                "description": "Number of items skipped from the beginning",
                "minimum": 0
              },
              "has_more": {
                "type": "boolean",
                "description": "Whether there are more items available beyond this page"
              }
            },
            "required": ["total", "limit", "offset", "has_more"]
          }
        },
        "required": ["data", "pagination"]
      },
      "MarkupElement": {
        "type": "object",
        "description": "SVG/HTML markup element for custom shape definitions in X6",
        "required": ["tagName"],
        "properties": {
          "tagName": {
            "type": "string",
            "description": "SVG or HTML tag name (e.g., 'rect', 'circle', 'path', 'text')",
            "example": "rect"
          },
          "selector": {
            "type": "string",
            "description": "CSS selector for targeting this element in styling",
            "example": "body"
          },
          "attrs": {
            "type": "object",
            "description": "Element attributes and styling properties",
            "additionalProperties": true,
            "example": {
              "fill": "#ffffff",
              "stroke": "#000000",
              "stroke-width": 2
            }
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarkupElement"
            },
            "description": "Nested child elements"
          }
        }
      },
      "CellTool": {
        "type": "object",
        "description": "Interactive tool configuration for X6 cells",
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Tool identifier (e.g., 'boundary', 'button', 'remove')",
            "example": "button"
          },
          "args": {
            "type": "object",
            "description": "Tool-specific configuration arguments",
            "additionalProperties": true,
            "example": {
              "x": 10,
              "y": 10,
              "markup": "<circle r='5' fill='red'/>"
            }
          }
        }
      },
      "EdgeRouter": {
        "oneOf": [
          {
            "type": "string",
            "enum": ["normal", "orth", "oneSide", "manhattan", "metro", "er"],
            "description": "Built-in router name"
          },
          {
            "type": "object",
            "description": "Router with custom configuration",
            "required": ["name"],
            "properties": {
              "name": {
                "type": "string",
                "enum": ["normal", "orth", "oneSide", "manhattan", "metro", "er"],
                "description": "Router algorithm name"
              },
              "args": {
                "type": "object",
                "description": "Router-specific arguments",
                "additionalProperties": true,
                "properties": {
                  "padding": {
                    "type": "number",
                    "description": "Padding around obstacles for routing"
                  },
                  "step": {
                    "type": "number",
                    "description": "Grid step size for orthogonal routing"
                  },
                  "directions": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": ["top", "right", "bottom", "left"]
                    },
                    "description": "Allowed routing directions"
                  }
                }
              }
            }
          }
        ],
        "description": "Edge routing algorithm configuration for pathfinding",
        "example": {
          "name": "manhattan",
          "args": {
            "step": 10,
            "padding": 20
          }
        }
      },
      "EdgeConnector": {
        "oneOf": [
          {
            "type": "string",
            "enum": ["normal", "rounded", "smooth", "jumpover"],
            "description": "Built-in connector name"
          },
          {
            "type": "object",
            "description": "Connector with custom configuration",
            "required": ["name"],
            "properties": {
              "name": {
                "type": "string",
                "enum": ["normal", "rounded", "smooth", "jumpover"],
                "description": "Connector style name"
              },
              "args": {
                "type": "object",
                "description": "Connector-specific arguments",
                "additionalProperties": true,
                "properties": {
                  "radius": {
                    "type": "number",
                    "description": "Radius for rounded connectors"
                  },
                  "precision": {
                    "type": "number",
                    "description": "Precision for smooth connectors"
                  },
                  "size": {
                    "type": "number",
                    "description": "Jump size for jumpover connectors"
                  },
                  "jump": {
                    "type": "string",
                    "enum": ["arc", "gap", "cubic"],
                    "description": "Jump style for jumpover connectors"
                  }
                }
              }
            }
          }
        ],
        "description": "Edge connector style configuration for visual appearance",
        "example": {
          "name": "rounded",
          "args": {
            "radius": 10
          }
        }
      }
    },
    "responses": {
      "Error": {
        "description": "Error response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  },
  "paths": {
    "/": {
      "get": {
        "tags": ["General"],
        "summary": "Get API information",
        "description": "Returns service, API, and operator information without authentication",
        "operationId": "getApiInfo",
        "responses": {
          "200": {
            "description": "Service and API information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInfo"
                }
              }
            }
          }
        }
      }
    },
    "/auth/providers": {
      "get": {
        "tags": ["Authentication"],
        "summary": "List available OAuth providers",
        "description": "Returns a list of configured OAuth providers available for authentication",
        "operationId": "getAuthProviders",
        "responses": {
          "200": {
            "description": "List of available OAuth providers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Provider identifier"
                      },
                      "name": {
                        "type": "string",
                        "description": "Display name of the provider"
                      },
                      "enabled": {
                        "type": "boolean",
                        "description": "Whether the provider is currently enabled"
                      },
                      "icon": {
                        "type": "string",
                        "description": "Icon identifier for the provider"
                      }
                    },
                    "required": ["id", "name", "enabled"]
                  }
                }
              }
            },
            "example": {
              "request": "GET /auth/providers",
              "response": {
                "status": 200,
                "body": [
                  {
                    "id": "google",
                    "name": "Google",
                    "enabled": true,
                    "icon": "google"
                  },
                  {
                    "id": "github",
                    "name": "GitHub",
                    "enabled": true,
                    "icon": "github"
                  }
                ]
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/auth/login": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Initiate OAuth login",
        "description": "Redirects the user to an OAuth provider for authentication",
        "operationId": "initiateOAuthLogin",
        "parameters": [
          {
            "name": "redirect_uri",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Optional URI to redirect to after login"
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect to OAuth provider",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "URL of the OAuth provider's authorization endpoint"
              }
            }
          }
        },
        "example": {
          "request": "GET /auth/login?redirect_uri=https://client.example.com/callback",
          "response": {
            "status": 302,
            "headers": {
              "Location": "https://oauth-provider.com/auth?client_id=abc&response_type=code&redirect_uri=https://client.example.com/callback"
            }
          }
        }
      }
    },
    "/auth/token": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Exchange authorization code for JWT",
        "description": "Exchanges an OAuth authorization code for a JWT token",
        "operationId": "exchangeToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "Authorization code from OAuth provider"
                  },
                  "provider": {
                    "type": "string",
                    "description": "OAuth provider identifier"
                  },
                  "redirect_uri": {
                    "type": "string",
                    "format": "uri",
                    "description": "Redirect URI used in the authorization request"
                  }
                },
                "required": ["code", "provider"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "JWT issued successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthTokenResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Refresh JWT token",
        "description": "Exchanges a refresh token for a new JWT access token",
        "operationId": "refreshToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refresh_token": {
                    "type": "string",
                    "description": "Valid refresh token"
                  }
                },
                "required": ["refresh_token"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "New JWT issued successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthTokenResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/auth/me": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Get current user information",
        "description": "Returns information about the currently authenticated user",
        "operationId": "getCurrentUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Current user information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Unique identifier for the user (UUID)",
                      "maxLength": 36
                    },
                    "email": {
                      "type": "string",
                      "format": "email",
                      "description": "User email address"
                    },
                    "name": {
                      "type": "string",
                      "description": "User display name"
                    },
                    "providers": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "provider": {
                            "type": "string",
                            "description": "OAuth provider name"
                          },
                          "is_primary": {
                            "type": "boolean",
                            "description": "Whether this is the primary authentication method"
                          }
                        }
                      },
                      "description": "Linked OAuth providers"
                    }
                  },
                  "required": ["id", "email", "name"]
                },
                "example": {
                  "id": "550e8400-e29b-41d4-a716-446655440000",
                  "email": "user@example.com",
                  "name": "John Doe",
                  "providers": [
                    {
                      "provider": "google",
                      "is_primary": true
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/auth/callback": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Handle OAuth callback",
        "description": "Exchanges an OAuth authorization code for a JWT",
        "operationId": "handleOAuthCallback",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Authorization code from the OAuth provider"
          },
          {
            "name": "state",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Optional state parameter for CSRF protection"
          }
        ],
        "responses": {
          "200": {
            "description": "JWT issued successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthTokenResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Logout user",
        "description": "Invalidates the user's JWT and ends the session",
        "operationId": "logoutUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Session ended successfully"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/threat_models": {
      "get": {
        "tags": ["Threat Models"],
        "summary": "List threat models",
        "description": "Returns a list of threat models accessible to the authenticated user as name-ID pairs",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 20
            },
            "description": "Number of threat models to return"
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "description": "Pagination offset"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "created_at:desc"
            },
            "description": "Sort order (e.g., created_at:desc, name:asc)"
          },
          {
            "name": "owner",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by owner username or email"
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by threat model name (partial match)"
          },
          {
            "name": "description",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by threat model description (partial match)"
          },
          {
            "name": "issue_url",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by issue URL (partial match)"
          },
          {
            "name": "created_after",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter threat models created after this date (RFC3339 format)"
          },
          {
            "name": "created_before",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter threat models created before this date (RFC3339 format)"
          },
          {
            "name": "modified_after",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter threat models modified after this date (RFC3339 format)"
          },
          {
            "name": "modified_before",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter threat models modified before this date (RFC3339 format)"
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated list of threat models as name-ID pairs",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ListItem"
                          }
                        }
                      }
                    }
                  ]
                },
                "example": {
                  "data": [
                    {
                      "name": "System Threat Model",
                      "id": "550e8400-e29b-41d4-a716-446655440000"
                    }
                  ],
                  "pagination": {
                    "total": 1,
                    "limit": 20,
                    "offset": 0,
                    "has_more": false
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "tags": ["Threat Models"],
        "summary": "Create a threat model",
        "description": "Creates a new threat model with the authenticated user as owner",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the threat model"
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the threat model"
                  }
                },
                "required": ["name"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Threat model created successfully",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "URL of the new threat model"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThreatModel"
                },
                "example": {
                  "id": "550e8400-e29b-41d4-a716-446655440000",
                  "name": "System Threat Model",
                  "description": "Threats for system X",
                  "created_at": "2025-04-06T12:00:00Z",
                  "modified_at": "2025-04-06T12:00:00Z",
                  "owner": "user@example.com",
                  "created_by": "user@example.com",
                  "threat_model_framework": "STRIDE",
                  "authorization": [
                    {
                      "subject": "user@example.com",
                      "role": "owner"
                    }
                  ],
                  "metadata": [],
                  "documents": [],
                  "sourceCode": [],
                  "diagrams": [],
                  "threats": []
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/threat_models/{threat_model_id}": {
      "get": {
        "tags": ["Threat Models"],
        "summary": "Retrieve a threat model",
        "description": "Retrieves the full details of a specific threat model if the user has access",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model to retrieve (UUID)"
          }
        ],
        "responses": {
          "200": {
            "description": "Full threat model details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThreatModel"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "tags": ["Threat Models"],
        "summary": "Update a threat model",
        "description": "Fully updates a threat model; restricted to writer/owner roles",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model to update (UUID)"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ThreatModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Threat model updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThreatModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "example": {
          "request": "PUT /threat_models/550e8400-e29b-41d4-a716-446655440000\nAuthorization: Bearer <JWT>\nContent-Type: application/json\n{\"id\": \"550e8400-e29b-41d4-a716-446655440000\", \"name\": \"Updated Threat Model\", \"description\": \"Updated threats\", \"created_at\": \"2025-04-06T12:00:00Z\", \"modified_at\": \"2025-04-06T12:00:00Z\", \"owner\": \"user@example.com\", \"created_by\": \"user@example.com\", \"threat_model_framework\": \"STRIDE\", \"authorization\": [{\"subject\": \"user@example.com\", \"role\": \"owner\"}], \"metadata\": [], \"documents\": [], \"sourceCode\": [{\"id\": \"6ba7b810-1dad-11d1-8080-00c04fd430c8\", \"name\": \"GitHub Repo\", \"description\": \"Technical design document for the Example application\", \"type\": \"git\", \"url\": \"https://github.com/ericfitz/tmi-ux.git\", \"parameters\": {\"refType\": \"branch\", \"refValue\": \"main\"}, \"metadata\": []}], \"diagrams\": [], \"threats\": []}",
          "response": {
            "status": 200,
            "body": {
              "id": "550e8400-e29b-41d4-a716-446655440000",
              "name": "Updated Threat Model",
              "description": "Updated threats",
              "created_at": "2025-04-06T12:00:00Z",
              "modified_at": "2025-04-06T12:45:00Z",
              "owner": "user@example.com",
              "created_by": "user@example.com",
              "threat_model_framework": "STRIDE",
              "authorization": [
                {
                  "subject": "user@example.com",
                  "role": "owner"
                }
              ],
              "metadata": [],
              "documents": [],
              "sourceCode": [
                {
                  "id": "6ba7b810-1dad-11d1-8080-00c04fd430c8",
                  "name": "GitHub Repo",
                  "description": "Source code for the tmi-ux application",
                  "type": "git",
                  "url": "https://github.com/ericfitz/tmi-ux.git",
                  "parameters": {
                    "refType": "branch",
                    "refValue": "main"
                  },
                  "metadata": []
                }
              ],
              "diagrams": [],
              "threats": []
            }
          }
        }
      },
      "patch": {
        "tags": ["Threat Models"],
        "summary": "Partially update a threat model",
        "description": "Applies JSON Patch operations to a threat model; restricted to writer/owner roles",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model to update (UUID)"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "op": {
                      "type": "string",
                      "enum": ["add", "replace", "remove", "move", "copy", "test"],
                      "description": "Patch operation type"
                    },
                    "path": {
                      "type": "string",
                      "description": "JSON path to target"
                    },
                    "value": {
                      "description": "Value to apply"
                    }
                  },
                  "required": ["op", "path"]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Threat model updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThreatModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "example": {
          "request": "PATCH /threat_models/550e8400-e29b-41d4-a716-446655440000\nAuthorization: Bearer <JWT>\nContent-Type: application/json\n[{\"op\": \"add\", \"path\": \"/threats/-\", \"value\": {\"id\": \"6ba7b810-9dad-11d1-80b4-00c04fd430c8\", \"threat_model_id\": \"550e8400-e29b-41d4-a716-446655440000\", \"name\": \"Data Breach\", \"description\": \"Unauthorized access\", \"created_at\": \"2025-04-06T12:01:00Z\", \"modified_at\": \"2025-04-06T12:01:00Z\", \"severity\": \"High\", \"priority\": \"High\", \"mitigated\": false, \"status\": \"Open\", \"threat_type\": \"Information Disclosure\", \"metadata\": []}}]",
          "response": {
            "status": 200,
            "body": {
              "id": "550e8400-e29b-41d4-a716-446655440000",
              "name": "System Threat Model",
              "description": "Threats for system X",
              "created_at": "2025-04-06T12:00:00Z",
              "modified_at": "2025-04-06T12:01:00Z",
              "owner": "user@example.com",
              "created_by": "user@example.com",
              "threat_model_framework": "STRIDE",
              "authorization": [
                {
                  "subject": "user@example.com",
                  "role": "owner"
                }
              ],
              "metadata": [],
              "documents": [],
              "sourceCode": [],
              "diagrams": [],
              "threats": [
                {
                  "id": "6ba7b810-9dad-11d1-80b4-00c04fd430c8",
                  "threat_model_id": "550e8400-e29b-41d4-a716-446655440000",
                  "name": "Data Breach",
                  "description": "Unauthorized access",
                  "created_at": "2025-04-06T12:01:00Z",
                  "modified_at": "2025-04-06T12:01:00Z",
                  "severity": "High",
                  "priority": "High",
                  "mitigated": false,
                  "status": "Open",
                  "threat_type": "Information Disclosure",
                  "metadata": []
                }
              ]
            }
          }
        }
      },
      "delete": {
        "tags": ["Threat Models"],
        "summary": "Delete a threat model",
        "description": "Deletes a threat model; restricted to owner role",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model to delete (UUID)"
          }
        ],
        "responses": {
          "204": {
            "description": "Threat model deleted successfully"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "example": {
          "request": "DELETE /threat_models/550e8400-e29b-41d4-a716-446655440000\nAuthorization: Bearer <JWT>",
          "response": {
            "status": 204
          }
        }
      }
    },
    "/threat_models/{threat_model_id}/diagrams": {
      "get": {
        "tags": ["Diagrams"],
        "summary": "List diagrams for a threat model",
        "description": "Returns a list of diagrams associated with the specified threat model",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 20
            },
            "description": "Number of diagrams to return"
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "description": "Pagination offset"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "created_at:desc"
            },
            "description": "Sort order (e.g., created_at:desc, name:asc)"
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by diagram name (partial match)"
          },
          {
            "name": "description",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by diagram description (partial match)"
          },
          {
            "name": "created_after",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter diagrams created after this date (RFC3339 format)"
          },
          {
            "name": "created_before",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter diagrams created before this date (RFC3339 format)"
          },
          {
            "name": "modified_after",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter diagrams modified after this date (RFC3339 format)"
          },
          {
            "name": "modified_before",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter diagrams modified before this date (RFC3339 format)"
          },
          {
            "name": "owner",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by owner username or email"
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated list of diagrams as name-ID pairs",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ListItem"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "example": {
          "request": "GET /threat_models/550e8400-e29b-41d4-a716-446655440000/diagrams?limit=2&offset=0\nAuthorization: Bearer <JWT>",
          "response": {
            "status": 200,
            "body": {
              "data": [
                {
                  "name": "Workflow Diagram",
                  "id": "123e4567-e89b-12d3-a456-426614174000"
                },
                {
                  "name": "System Overview",
                  "id": "456e7890-e12f-34d5-a678-426614174001"
                }
              ],
              "pagination": {
                "total": 2,
                "limit": 2,
                "offset": 0,
                "has_more": false
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Diagrams"],
        "summary": "Create a diagram for a threat model",
        "description": "Creates a new diagram associated with the specified threat model",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the diagram"
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the diagram"
                  }
                },
                "required": ["name"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Diagram created successfully",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "URL of the new diagram"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Diagram"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "example": {
          "request": "POST /threat_models/550e8400-e29b-41d4-a716-446655440000/diagrams\nAuthorization: Bearer <JWT>\nContent-Type: application/json\n{\"name\": \"New Diagram\", \"description\": \"A test diagram\"}",
          "response": {
            "status": 201,
            "headers": {
              "Location": "/threat_models/550e8400-e29b-41d4-a716-446655440000/diagrams/123e4567-e89b-12d3-a456-426614174000"
            },
            "body": {
              "id": "123e4567-e89b-12d3-a456-426614174000",
              "name": "New Diagram",
              "type": "DFD-1.0.0",
              "description": "A test diagram",
              "created_at": "2025-04-06T12:00:00Z",
              "modified_at": "2025-04-06T12:00:00Z",
              "metadata": [],
              "cells": []
            }
          }
        }
      }
    },
    "/threat_models/{threat_model_id}/diagrams/{diagram_id}": {
      "get": {
        "tags": ["Diagrams"],
        "summary": "Retrieve a diagram",
        "description": "Retrieves the full details of a specific diagram within a threat model",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "diagram_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the diagram to retrieve (UUID)"
          }
        ],
        "responses": {
          "200": {
            "description": "Full diagram details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Diagram"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "example": {
          "request": "GET /threat_models/550e8400-e29b-41d4-a716-446655440000/diagrams/123e4567-e89b-12d3-a456-426614174000\nAuthorization: Bearer <JWT>",
          "response": {
            "status": 200,
            "body": {
              "id": "123e4567-e89b-12d3-a456-426614174000",
              "name": "Workflow Diagram",
              "type": "DFD-1.0.0",
              "description": "A process workflow",
              "created_at": "2025-04-06T12:00:00Z",
              "modified_at": "2025-04-06T12:30:00Z",
              "metadata": [],
              "cells": [
                {
                  "id": "actor1",
                  "shape": "actor",
                  "x": 50,
                  "y": 100,
                  "width": 100,
                  "height": 80,
                  "zIndex": 10,
                  "visible": true,
                  "attrs": {
                    "body": {
                      "fill": "#ffffff",
                      "stroke": "#000000",
                      "strokeWidth": 2
                    },
                    "text": {
                      "text": "User",
                      "fontSize": 14,
                      "fill": "#000000"
                    }
                  },
                  "ports": {
                    "groups": {
                      "out": { "position": "right" }
                    },
                    "items": [{ "id": "port_out_1", "group": "out" }]
                  },
                  "data": []
                },
                {
                  "id": "process1",
                  "shape": "process",
                  "x": 250,
                  "y": 100,
                  "width": 120,
                  "height": 60,
                  "zIndex": 10,
                  "visible": true,
                  "attrs": {
                    "body": {
                      "fill": "#ffffff",
                      "stroke": "#000000",
                      "strokeWidth": 2
                    },
                    "text": {
                      "text": "Process Request",
                      "fontSize": 14,
                      "fill": "#000000"
                    }
                  },
                  "ports": {
                    "groups": {
                      "in": { "position": "left" },
                      "out": { "position": "right" }
                    },
                    "items": [
                      { "id": "port_in_1", "group": "in" },
                      { "id": "port_out_1", "group": "out" }
                    ]
                  },
                  "data": []
                },
                {
                  "id": "edge1",
                  "shape": "edge",
                  "source": {
                    "cell": "actor1",
                    "port": "port_out_1"
                  },
                  "target": {
                    "cell": "process1",
                    "port": "port_in_1"
                  },
                  "zIndex": 1,
                  "visible": true,
                  "attrs": {
                    "line": {
                      "stroke": "#808080",
                      "strokeWidth": 1,
                      "targetMarker": {
                        "name": "classic",
                        "size": 8
                      }
                    }
                  },
                  "labels": [
                    {
                      "attrs": {
                        "text": {
                          "text": "Request",
                          "fontSize": 12,
                          "fill": "#333333"
                        }
                      },
                      "position": 0.5
                    }
                  ],
                  "vertices": [],
                  "data": []
                }
              ]
            }
          }
        }
      },
      "put": {
        "tags": ["Diagrams"],
        "summary": "Update a diagram",
        "description": "Fully updates a diagram within a threat model; restricted to writer/owner roles",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "diagram_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the diagram to update (UUID)"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Diagram"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Diagram updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Diagram"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "example": {
          "request": "PUT /threat_models/550e8400-e29b-41d4-a716-446655440000/diagrams/123e4567-e89b-12d3-a456-426614174000\nAuthorization: Bearer <JWT>\nContent-Type: application/json\n{\"id\": \"123e4567-e89b-12d3-a456-426614174000\", \"name\": \"Updated Diagram\", \"type\": \"DFD-1.0.0\", \"description\": \"Updated description\", \"created_at\": \"2025-04-06T12:00:00Z\", \"modified_at\": \"2025-04-06T12:00:00Z\", \"metadata\": [], \"cells\": [{\"id\": \"node1\", \"shape\": \"store\", \"x\": 200, \"y\": 100, \"width\": 140, \"height\": 70, \"zIndex\": 10, \"visible\": true, \"attrs\": {\"body\": {\"fill\": \"#f0f0f0\", \"stroke\": \"#333333\", \"strokeWidth\": 2}, \"text\": {\"text\": \"Data Store\", \"fontSize\": 14, \"fill\": \"#333333\"}}, \"data\": []}]}",
          "response": {
            "status": 200,
            "body": {
              "id": "123e4567-e89b-12d3-a456-426614174000",
              "name": "Updated Diagram",
              "type": "DFD-1.0.0",
              "description": "Updated description",
              "created_at": "2025-04-06T12:00:00Z",
              "modified_at": "2025-04-06T12:45:00Z",
              "metadata": [],
              "cells": [
                {
                  "id": "node1",
                  "shape": "store",
                  "x": 200,
                  "y": 100,
                  "width": 140,
                  "height": 70,
                  "zIndex": 10,
                  "visible": true,
                  "attrs": {
                    "body": {
                      "fill": "#f0f0f0",
                      "stroke": "#333333",
                      "strokeWidth": 2
                    },
                    "text": {
                      "text": "Data Store",
                      "fontSize": 14,
                      "fill": "#333333"
                    }
                  },
                  "data": []
                }
              ]
            }
          }
        }
      },
      "patch": {
        "tags": ["Diagrams"],
        "summary": "Partially update a diagram",
        "description": "Applies JSON Patch operations to a diagram within a threat model; restricted to writer/owner roles",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "diagram_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the diagram to update (UUID)"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "op": {
                      "type": "string",
                      "enum": ["add", "replace", "remove", "move", "copy", "test"],
                      "description": "Patch operation type"
                    },
                    "path": {
                      "type": "string",
                      "description": "JSON path to target"
                    },
                    "value": {
                      "description": "Value to apply"
                    }
                  },
                  "required": ["op", "path"]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Diagram updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Diagram"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "example": {
          "request": "PATCH /threat_models/550e8400-e29b-41d4-a716-446655440000/diagrams/123e4567-e89b-12d3-a456-426614174000\nAuthorization: Bearer <JWT>\nContent-Type: application/json\n[{\"op\": \"replace\", \"path\": \"/name\", \"value\": \"Patched Diagram\"}, {\"op\": \"add\", \"path\": \"/cells/-\", \"value\": {\"id\": \"node1\", \"shape\": \"actor\", \"x\": 150, \"y\": 150, \"width\": 100, \"height\": 50, \"zIndex\": 10, \"visible\": true, \"attrs\": {\"body\": {\"fill\": \"#ffffff\", \"stroke\": \"#000000\", \"strokeWidth\": 2}, \"text\": {\"text\": \"User\", \"fontSize\": 14, \"fill\": \"#000000\"}}, \"data\": []}}]",
          "response": {
            "status": 200,
            "body": {
              "id": "123e4567-e89b-12d3-a456-426614174000",
              "name": "Patched Diagram",
              "type": "DFD-1.0.0",
              "description": "A process workflow",
              "created_at": "2025-04-06T12:00:00Z",
              "modified_at": "2025-04-06T12:45:00Z",
              "metadata": [],
              "cells": [
                {
                  "id": "node1",
                  "shape": "actor",
                  "x": 150,
                  "y": 150,
                  "width": 100,
                  "height": 50,
                  "zIndex": 10,
                  "visible": true,
                  "attrs": {
                    "body": {
                      "fill": "#ffffff",
                      "stroke": "#000000",
                      "strokeWidth": 2
                    },
                    "text": {
                      "text": "User",
                      "fontSize": 14,
                      "fill": "#000000"
                    }
                  },
                  "data": []
                }
              ],
              "version": "1.0"
            }
          }
        }
      },
      "delete": {
        "tags": ["Diagrams"],
        "summary": "Delete a diagram",
        "description": "Deletes a diagram within a threat model; restricted to owner role",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "diagram_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the diagram to delete (UUID)"
          }
        ],
        "responses": {
          "204": {
            "description": "Diagram deleted successfully"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "example": {
          "request": "DELETE /threat_models/550e8400-e29b-41d4-a716-446655440000/diagrams/123e4567-e89b-12d3-a456-426614174000\nAuthorization: Bearer <JWT>",
          "response": {
            "status": 204
          }
        }
      }
    },
    "/threat_models/{threat_model_id}/diagrams/{diagram_id}/collaborate": {
      "get": {
        "tags": ["Collaboration"],
        "summary": "Get collaboration session status",
        "description": "Returns details of an active collaboration session for a diagram within a threat model",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "diagram_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the diagram (UUID)"
          }
        ],
        "responses": {
          "200": {
            "description": "Session details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollaborationSession"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "example": {
          "request": "GET /threat_models/550e8400-e29b-41d4-a716-446655440000/diagrams/123e4567-e89b-12d3-a456-426614174000/collaborate\nAuthorization: Bearer <JWT>",
          "response": {
            "status": 200,
            "body": {
              "session_id": "abc123-session-uuid",
              "threat_model_id": "550e8400-e29b-41d4-a716-446655440000",
              "diagram_id": "123e4567-e89b-12d3-a456-426614174000",
              "participants": [
                {
                  "user_id": "user@example.com",
                  "joined_at": "2025-04-06T12:02:00Z"
                }
              ],
              "websocket_url": "wss://api.example.com/threat_models/550e8400-e29b-41d4-a716-446655440000/diagrams/123e4567-e89b-12d3-a456-426614174000/ws"
            }
          }
        }
      },
      "post": {
        "tags": ["Collaboration"],
        "summary": "Join or start collaboration session",
        "description": "Joins an existing session or starts a new one for a diagram within a threat model; writers/owners can start, readers can only join",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "diagram_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the diagram (UUID)"
          }
        ],
        "responses": {
          "200": {
            "description": "Session joined or started successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollaborationSession"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "example": {
          "request": "POST /threat_models/550e8400-e29b-41d4-a716-446655440000/diagrams/123e4567-e89b-12d3-a456-426614174000/collaborate\nAuthorization: Bearer <JWT>",
          "response": {
            "status": 200,
            "body": {
              "session_id": "abc123-session-uuid",
              "threat_model_id": "550e8400-e29b-41d4-a716-446655440000",
              "diagram_id": "123e4567-e89b-12d3-a456-426614174000",
              "participants": [
                {
                  "user_id": "user@example.com",
                  "joined_at": "2025-04-06T12:02:00Z"
                }
              ],
              "websocket_url": "wss://api.example.com/threat_models/550e8400-e29b-41d4-a716-446655440000/diagrams/123e4567-e89b-12d3-a456-426614174000/ws"
            }
          }
        }
      },
      "delete": {
        "tags": ["Collaboration"],
        "summary": "Leave collaboration session",
        "description": "Removes the user from an active collaboration session for a diagram within a threat model",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threat_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the threat model (UUID)"
          },
          {
            "name": "diagram_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "description": "Unique identifier of the diagram (UUID)"
          }
        ],
        "responses": {
          "204": {
            "description": "Left session successfully"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "example": {
          "request": "DELETE /threat_models/550e8400-e29b-41d4-a716-446655440000/diagrams/123e4567-e89b-12d3-a456-426614174000/collaborate\nAuthorization: Bearer <JWT>",
          "response": {
            "status": 204
          }
        }
      }
    }
  }
}
